<?xml version="1.0" encoding="utf-8" standalone="no"?>
<!--This file represents the results of running a test suite-->
<test-results name="D:\GitHub\Projac\build\output\csharp\Projac.Tests.dll" total="904" errors="0" failures="0" not-run="0" inconclusive="0" ignored="0" skipped="0" invalid="0" date="2014-09-29" time="09:15:10">
  <environment nunit-version="2.6.3.13283" clr-version="2.0.50727.5485" os-version="Microsoft Windows NT 6.1.7601 Service Pack 1" platform="Win32NT" cwd="D:\GitHub\Projac\build" machine-name="SEAKING" user="Yves1975" user-domain="SEAKING" />
  <culture-info current-culture="nl-BE" current-uiculture="nl-NL" />
  <test-suite type="Test Project" name="" executed="True" result="Success" success="True" time="2.959" asserts="0">
    <results>
      <test-suite type="Assembly" name="D:\GitHub\Projac\build\output\csharp\Projac.Tests.dll" executed="True" result="Success" success="True" time="0.173" asserts="0">
        <results>
          <test-suite type="Namespace" name="Projac" executed="True" result="Success" success="True" time="0.166" asserts="0">
            <results>
              <test-suite type="Namespace" name="Tests" executed="True" result="Success" success="True" time="0.166" asserts="0">
                <results>
                  <test-suite type="TestFixture" name="AsyncSqlProjectorTests" executed="True" result="Success" success="True" time="0.097" asserts="0">
                    <results>
                      <test-case name="Projac.Tests.AsyncSqlProjectorTests.ExecutorCanNotBeNull" executed="True" result="Success" success="True" time="0.031" asserts="1" />
                      <test-case name="Projac.Tests.AsyncSqlProjectorTests.HandlersCanNotBeNull" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="Projac.Tests.AsyncSqlProjectorTests.ProjectAsyncMessageCanNotBeNull" executed="True" result="Success" success="True" time="0.003" asserts="1" />
                      <test-case name="Projac.Tests.AsyncSqlProjectorTests.ProjectAsyncMessageCausesExecutorToBeCalledWithExpectedCommandsWhenMessageTypeMatches" executed="True" result="Success" success="True" time="0.024" asserts="2" />
                      <test-case name="Projac.Tests.AsyncSqlProjectorTests.ProjectAsyncMessageCausesExecutorToBeCalledWithExpectedCommandsWhenMessageTypeMismatches" executed="True" result="Success" success="True" time="0.002" asserts="2" />
                      <test-case name="Projac.Tests.AsyncSqlProjectorTests.ProjectAsyncMessagesCanNotBeNull" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                      <test-case name="Projac.Tests.AsyncSqlProjectorTests.ProjectAsyncMessagesCausesExecutorToBeCalledWithExpectedCommandsWhenMessageTypeMatches" executed="True" result="Success" success="True" time="0.006" asserts="2" />
                      <test-case name="Projac.Tests.AsyncSqlProjectorTests.ProjectAsyncMessagesCausesExecutorToBeCalledWithExpectedCommandsWhenMessageTypeMismatches" executed="True" result="Success" success="True" time="0.002" asserts="2" />
                      <test-case name="Projac.Tests.AsyncSqlProjectorTests.ProjectAsyncTokenMessageCanNotBeNull" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="Projac.Tests.AsyncSqlProjectorTests.ProjectAsyncTokenMessageCausesExecutorToBeCalledWithExpectedCommandsWhenMessageTypeMatches" executed="True" result="Success" success="True" time="0.002" asserts="2" />
                      <test-case name="Projac.Tests.AsyncSqlProjectorTests.ProjectAsyncTokenMessageCausesExecutorToBeCalledWithExpectedCommandsWhenMessageTypeMismatches" executed="True" result="Success" success="True" time="0.002" asserts="2" />
                      <test-case name="Projac.Tests.AsyncSqlProjectorTests.ProjectAsyncTokenMessagesCanNotBeNull" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="Projac.Tests.AsyncSqlProjectorTests.ProjectAsyncTokenMessagesCausesExecutorToBeCalledWithExpectedCommandsWhenMessageTypeMatches" executed="True" result="Success" success="True" time="0.002" asserts="2" />
                      <test-case name="Projac.Tests.AsyncSqlProjectorTests.ProjectAsyncTokenMessagesCausesExecutorToBeCalledWithExpectedCommandsWhenMessageTypeMismatches" executed="True" result="Success" success="True" time="0.002" asserts="2" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="SqlProjectionBuilderTests" executed="True" result="Success" success="True" time="0.025" asserts="0">
                    <results>
                      <test-case name="Projac.Tests.SqlProjectionBuilderTests.DecoratedProjectionCanNotBeNull" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                      <test-case name="Projac.Tests.SqlProjectionBuilderTests.DecoratedProjectionHandlersAreCopiedOnConstruction" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                      <test-case name="Projac.Tests.SqlProjectionBuilderTests.InitialInstanceBuildReturnsExpectedResult" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="Projac.Tests.SqlProjectionBuilderTests.WhenHandlerWithCommandArrayCanNotBeNull" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                      <test-case name="Projac.Tests.SqlProjectionBuilderTests.WhenHandlerWithCommandArrayReturnsExpectedResult" executed="True" result="Success" success="True" time="0.002" asserts="1" />
                      <test-case name="Projac.Tests.SqlProjectionBuilderTests.WhenHandlerWithCommandEnumerationCanNotBeNull" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                      <test-case name="Projac.Tests.SqlProjectionBuilderTests.WhenHandlerWithCommandEnumerationPreservesPreviouslyCollectedStatementsUponBuild" executed="True" result="Success" success="True" time="0.003" asserts="1" />
                      <test-case name="Projac.Tests.SqlProjectionBuilderTests.WhenHandlerWithCommandEnumerationReturnsExpectedResult" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="Projac.Tests.SqlProjectionBuilderTests.WhenHandlerWithSingleCommandCanNotBeNull" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                      <test-case name="Projac.Tests.SqlProjectionBuilderTests.WhenHandlerWithSingleCommandIsPreservedUponBuild" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                      <test-case name="Projac.Tests.SqlProjectionBuilderTests.WhenHandlerWithSingleCommandReturnsExpectedResult" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="Projac.Tests.SqlProjectionBuilderTests.WhenHandlerWithSingleStatementPreservesPreviouslyCollectedStatementsUponBuild" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                      <test-case name="Projac.Tests.SqlProjectionBuilderTests.WhenHandlerWithStatementArrayIsPreservedUponBuild" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                      <test-case name="Projac.Tests.SqlProjectionBuilderTests.WhenHandlerWithStatementArrayPreservesPreviouslyCollectedStatementsUponBuild" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                      <test-case name="Projac.Tests.SqlProjectionBuilderTests.WhenHandlerWithStatementEnumerationIsPreservedUponBuild" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="SqlProjectionHandlerTests" executed="True" result="Success" success="True" time="0.003" asserts="0">
                    <results>
                      <test-case name="Projac.Tests.SqlProjectionHandlerTests.HandlerCanNotBeNull" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="Projac.Tests.SqlProjectionHandlerTests.MessageCanNotBeNull" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="Projac.Tests.SqlProjectionHandlerTests.ParametersArePreservedAsProperties" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="SqlProjectionTests" executed="True" result="Success" success="True" time="0.017" asserts="0">
                    <results>
                      <test-case name="Projac.Tests.SqlProjectionTests.ConcatHandlerCanNotBeNull" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                      <test-case name="Projac.Tests.SqlProjectionTests.ConcatHandlerReturnsExpectedResult" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                      <test-case name="Projac.Tests.SqlProjectionTests.ConcatHandlersCanNotBeNull" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="Projac.Tests.SqlProjectionTests.ConcatHandlersReturnsExpectedResult" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                      <test-case name="Projac.Tests.SqlProjectionTests.ConcatProjectionCanNotBeNull" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="Projac.Tests.SqlProjectionTests.ConcatProjectionReturnsExpectedResult" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                      <test-case name="Projac.Tests.SqlProjectionTests.EmptyReturnsExpectedInstance" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                      <test-case name="Projac.Tests.SqlProjectionTests.EmptyReturnsSameInstance" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="Projac.Tests.SqlProjectionTests.EmptyToBuilderReturnsExpectedResult" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="Projac.Tests.SqlProjectionTests.ExplicitConversionToSqlProjectionHandlerArray" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="Projac.Tests.SqlProjectionTests.HandlersArePreservedAsProperty" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="Projac.Tests.SqlProjectionTests.HandlersCanNotBeNull" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="Projac.Tests.SqlProjectionTests.ImplicitConversionToSqlProjectionHandlerArray" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="Projac.Tests.SqlProjectionTests.ToBuilderReturnsExpectedResult" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="SqlProjectorTests" executed="True" result="Success" success="True" time="0.012" asserts="0">
                    <results>
                      <test-case name="Projac.Tests.SqlProjectorTests.ExecutorCanNotBeNull" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                      <test-case name="Projac.Tests.SqlProjectorTests.HandlersCanNotBeNull" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="Projac.Tests.SqlProjectorTests.ProjectMessageCanNotBeNull" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                      <test-case name="Projac.Tests.SqlProjectorTests.ProjectMessageCausesExecutorToBeCalledWithExpectedCommandsWhenMessageTypeMatches" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                      <test-case name="Projac.Tests.SqlProjectorTests.ProjectMessageCausesExecutorToBeCalledWithExpectedCommandsWhenMessageTypeMismatches" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                      <test-case name="Projac.Tests.SqlProjectorTests.ProjectMessagesCanNotBeNull" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                      <test-case name="Projac.Tests.SqlProjectorTests.ProjectMessagesCausesExecutorToBeCalledWithExpectedCommandsWhenMessageTypeMatches" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                      <test-case name="Projac.Tests.SqlProjectorTests.ProjectMessagesCausesExecutorToBeCalledWithExpectedCommandsWhenMessageTypeMismatches" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                    </results>
                  </test-suite>
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="Assembly" name="D:\GitHub\Projac\build\output\csharp\Paramol.Tests.dll" executed="True" result="Success" success="True" time="1.795" asserts="0">
        <results>
          <test-suite type="Namespace" name="Paramol" executed="True" result="Success" success="True" time="1.788" asserts="0">
            <results>
              <test-suite type="Namespace" name="Tests" executed="True" result="Success" success="True" time="1.788" asserts="0">
                <results>
                  <test-suite type="Namespace" name="Executors" executed="True" result="Success" success="True" time="0.281" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="ConnectedSqlCommandExecutorTests" executed="True" result="Success" success="True" time="0.053" asserts="0">
                        <results>
                          <test-case name="Paramol.Tests.Executors.ConnectedSqlCommandExecutorTests.ConnectionCanNotBeNull" executed="True" result="Success" success="True" time="0.009" asserts="1" />
                          <test-case name="Paramol.Tests.Executors.ConnectedSqlCommandExecutorTests.ConnectionMustBeOpen" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.Executors.ConnectedSqlCommandExecutorTests.ExecuteNonQueryAsyncCommandCanNotBeNull" executed="True" result="Success" success="True" time="0.013" asserts="1" />
                          <test-case name="Paramol.Tests.Executors.ConnectedSqlCommandExecutorTests.ExecuteNonQueryAsyncTokenCommandCanNotBeNull" executed="True" result="Success" success="True" time="0.002" asserts="1" />
                          <test-case name="Paramol.Tests.Executors.ConnectedSqlCommandExecutorTests.ExecuteNonQueryCommandCanNotBeNull" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-case name="Paramol.Tests.Executors.ConnectedSqlCommandExecutorTests.ExecuteNonQueryCommandsCanNotBeNull" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-case name="Paramol.Tests.Executors.ConnectedSqlCommandExecutorTests.ExecuteReaderAsyncCommandCanNotBeNull" executed="True" result="Success" success="True" time="0.002" asserts="1" />
                          <test-case name="Paramol.Tests.Executors.ConnectedSqlCommandExecutorTests.ExecuteReaderAsyncTokenCommandsCanNotBeNull" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-case name="Paramol.Tests.Executors.ConnectedSqlCommandExecutorTests.ExecuteReaderCommandCanNotBeNull" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-case name="Paramol.Tests.Executors.ConnectedSqlCommandExecutorTests.ExecuteScalarAsyncCommandCanNotBeNull" executed="True" result="Success" success="True" time="0.002" asserts="1" />
                          <test-case name="Paramol.Tests.Executors.ConnectedSqlCommandExecutorTests.ExecuteScalarAsyncTokenCommandsCanNotBeNull" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-case name="Paramol.Tests.Executors.ConnectedSqlCommandExecutorTests.ExecuteScalarCommandCanNotBeNull" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-case name="Paramol.Tests.Executors.ConnectedSqlCommandExecutorTests.IsAsynchronousSqlNonQueryCommandExecutor" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-case name="Paramol.Tests.Executors.ConnectedSqlCommandExecutorTests.IsAsynchronousSqlQueryCommandExecutor" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.Executors.ConnectedSqlCommandExecutorTests.IsSynchronousSqlNonQueryCommandExecutor" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.Executors.ConnectedSqlCommandExecutorTests.IsSynchronousSqlQueryCommandExecutor" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.Executors.ConnectedSqlCommandExecutorTests.OpenConnectionIsAccepted" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="ConnectedTransactionalSqlCommandExecutorTests" executed="True" result="Success" success="True" time="0.018" asserts="0">
                        <results>
                          <test-case name="Paramol.Tests.Executors.ConnectedTransactionalSqlCommandExecutorTests.ExecuteNonQueryAsyncCommandCanNotBeNull" executed="True" result="Success" success="True" time="0.003" asserts="1" />
                          <test-case name="Paramol.Tests.Executors.ConnectedTransactionalSqlCommandExecutorTests.ExecuteNonQueryAsyncCommandsCanNotBeNull" executed="True" result="Success" success="True" time="0.003" asserts="1" />
                          <test-case name="Paramol.Tests.Executors.ConnectedTransactionalSqlCommandExecutorTests.ExecuteNonQueryAsyncTokenCommandCanNotBeNull" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-case name="Paramol.Tests.Executors.ConnectedTransactionalSqlCommandExecutorTests.ExecuteNonQueryAsyncTokenCommandsCanNotBeNull" executed="True" result="Success" success="True" time="0.002" asserts="1" />
                          <test-case name="Paramol.Tests.Executors.ConnectedTransactionalSqlCommandExecutorTests.ExecuteNonQueryCommandCanNotBeNull" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-case name="Paramol.Tests.Executors.ConnectedTransactionalSqlCommandExecutorTests.ExecuteNonQueryCommandsCanNotBeNull" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-case name="Paramol.Tests.Executors.ConnectedTransactionalSqlCommandExecutorTests.IsAsynchronousSqlNonQueryCommandExecutor" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.Executors.ConnectedTransactionalSqlCommandExecutorTests.IsSynchronousTransactionalSqlNonQueryCommandExecutor" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.Executors.ConnectedTransactionalSqlCommandExecutorTests.TransactionCanNotBeNull" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="SqlCommandExecutorTests" executed="True" result="Success" success="True" time="0.178" asserts="0">
                        <results>
                          <test-case name="Paramol.Tests.Executors.SqlCommandExecutorTests.ConnectionStringSettingsCanNotBeNull" executed="True" result="Success" success="True" time="0.002" asserts="1" />
                          <test-case name="Paramol.Tests.Executors.SqlCommandExecutorTests.ExecuteNonQueryAsyncCommandCanNotBeNull" executed="True" result="Success" success="True" time="0.135" asserts="1" />
                          <test-case name="Paramol.Tests.Executors.SqlCommandExecutorTests.ExecuteNonQueryAsyncCommandsCanNotBeNull" executed="True" result="Success" success="True" time="0.004" asserts="1" />
                          <test-case name="Paramol.Tests.Executors.SqlCommandExecutorTests.ExecuteNonQueryAsyncTokenCommandCanNotBeNull" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-case name="Paramol.Tests.Executors.SqlCommandExecutorTests.ExecuteNonQueryAsyncTokenCommandsCanNotBeNull" executed="True" result="Success" success="True" time="0.002" asserts="1" />
                          <test-case name="Paramol.Tests.Executors.SqlCommandExecutorTests.ExecuteNonQueryCommandCanNotBeNull" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-case name="Paramol.Tests.Executors.SqlCommandExecutorTests.ExecuteNonQueryCommandsCanNotBeNull" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-case name="Paramol.Tests.Executors.SqlCommandExecutorTests.ExecuteReaderAsyncCommandCanNotBeNull" executed="True" result="Success" success="True" time="0.008" asserts="1" />
                          <test-case name="Paramol.Tests.Executors.SqlCommandExecutorTests.ExecuteReaderAsyncTokenCommandsCanNotBeNull" executed="True" result="Success" success="True" time="0.002" asserts="1" />
                          <test-case name="Paramol.Tests.Executors.SqlCommandExecutorTests.ExecuteReaderCommandCanNotBeNull" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-case name="Paramol.Tests.Executors.SqlCommandExecutorTests.ExecuteScalarAsyncCommandCanNotBeNull" executed="True" result="Success" success="True" time="0.003" asserts="1" />
                          <test-case name="Paramol.Tests.Executors.SqlCommandExecutorTests.ExecuteScalarAsyncTokenCommandsCanNotBeNull" executed="True" result="Success" success="True" time="0.002" asserts="1" />
                          <test-case name="Paramol.Tests.Executors.SqlCommandExecutorTests.ExecuteScalarCommandCanNotBeNull" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-case name="Paramol.Tests.Executors.SqlCommandExecutorTests.IsAsynchronousSqlNonQueryCommandExecutor" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.Executors.SqlCommandExecutorTests.IsAsynchronousSqlQueryCommandExecutor" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.Executors.SqlCommandExecutorTests.IsSynchronousSqlNonQueryCommandExecutor" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.Executors.SqlCommandExecutorTests.IsSynchronousSqlQueryCommandExecutor" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.Executors.SqlCommandExecutorTests.NonExistingProviderNameThrows" executed="True" result="Success" success="True" time="0.003" asserts="1" />
                          <test-case name="Paramol.Tests.Executors.SqlCommandExecutorTests.SqlClientProviderNameIsSupported" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="TransactionalSqlCommandExecutorTests" executed="True" result="Success" success="True" time="0.022" asserts="0">
                        <results>
                          <test-case name="Paramol.Tests.Executors.TransactionalSqlCommandExecutorTests.ConnectionStringSettingsCanNotBeNull" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-case name="Paramol.Tests.Executors.TransactionalSqlCommandExecutorTests.ExecuteNonQueryAsyncCommandCanNotBeNull" executed="True" result="Success" success="True" time="0.004" asserts="1" />
                          <test-case name="Paramol.Tests.Executors.TransactionalSqlCommandExecutorTests.ExecuteNonQueryAsyncCommandsCanNotBeNull" executed="True" result="Success" success="True" time="0.004" asserts="1" />
                          <test-case name="Paramol.Tests.Executors.TransactionalSqlCommandExecutorTests.ExecuteNonQueryAsyncTokenCommandCanNotBeNull" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-case name="Paramol.Tests.Executors.TransactionalSqlCommandExecutorTests.ExecuteNonQueryAsyncTokenCommandsCanNotBeNull" executed="True" result="Success" success="True" time="0.002" asserts="1" />
                          <test-case name="Paramol.Tests.Executors.TransactionalSqlCommandExecutorTests.ExecuteNonQueryCommandCanNotBeNull" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-case name="Paramol.Tests.Executors.TransactionalSqlCommandExecutorTests.ExecuteNonQueryCommandsCanNotBeNull" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-case name="Paramol.Tests.Executors.TransactionalSqlCommandExecutorTests.IsAsynchronousSqlNonQueryCommandExecutor" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.Executors.TransactionalSqlCommandExecutorTests.IsSynchronousTransactionalSqlNonQueryCommandExecutor" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.Executors.TransactionalSqlCommandExecutorTests.NonExistingProviderNameThrows" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.Executors.TransactionalSqlCommandExecutorTests.SqlClientProviderNameIsSupported" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="SqlClient" executed="True" result="Success" success="True" time="1.279" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="TSqlBigIntNullValueTests" executed="True" result="Success" success="True" time="0.026" asserts="0">
                        <results>
                          <test-case name="Paramol.Tests.SqlClient.TSqlBigIntNullValueTests.DoesEqualItself" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlBigIntNullValueTests.DoesNotEqualNull" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlBigIntNullValueTests.DoesNotEqualOtherObjectType" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlBigIntNullValueTests.HasExpectedHashCode" executed="True" result="Success" success="True" time="0.006" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlBigIntNullValueTests.InstanceIsSqlNullValue" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlBigIntNullValueTests.IsSqlParameterValue" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlBigIntNullValueTests.ToDbParameterReturnsExpectedInstance" executed="True" result="Success" success="True" time="0.012" asserts="19" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlBigIntNullValueTests.ToSqlParameterReturnsExpectedInstance" executed="True" result="Success" success="True" time="0.000" asserts="17" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="TSqlBigIntValueTests" executed="True" result="Success" success="True" time="0.010" asserts="0">
                        <results>
                          <test-case name="Paramol.Tests.SqlClient.TSqlBigIntValueTests.DoesEqualItself" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlBigIntValueTests.DoesNotEqualNull" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlBigIntValueTests.DoesNotEqualOtherObjectType" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlBigIntValueTests.IsSqlParameterValue" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlBigIntValueTests.ToDbParameterReturnsExpectedInstance" executed="True" result="Success" success="True" time="0.001" asserts="19" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlBigIntValueTests.ToSqlParameterReturnsExpectedInstance" executed="True" result="Success" success="True" time="0.000" asserts="17" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlBigIntValueTests.TwoInstanceAreEqualIfTheyHaveTheSameValue" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlBigIntValueTests.TwoInstanceAreNotEqualIfTheirValueDiffers" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlBigIntValueTests.TwoInstanceDoNotHaveTheSameHashCodeIfTheirValueDiffers" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlBigIntValueTests.TwoInstanceHaveTheSameHashCodeIfTheyHaveTheSameValue" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="TSqlBinaryNullValueTests" executed="True" result="Success" success="True" time="0.007" asserts="0">
                        <results>
                          <test-case name="Paramol.Tests.SqlClient.TSqlBinaryNullValueTests.DoesEqualItself" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlBinaryNullValueTests.DoesNotEqualNull" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlBinaryNullValueTests.DoesNotEqualOtherObjectType" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlBinaryNullValueTests.HasExpectedHashCode" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlBinaryNullValueTests.IsSqlParameterValue" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlBinaryNullValueTests.ToDbParameterReturnsExpectedInstance" executed="True" result="Success" success="True" time="0.000" asserts="19" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlBinaryNullValueTests.ToSqlParameterReturnsExpectedInstance" executed="True" result="Success" success="True" time="0.000" asserts="17" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="TSqlBinarySizeTest" executed="True" result="Success" success="True" time="0.020" asserts="0">
                        <results>
                          <test-case name="Paramol.Tests.SqlClient.TSqlBinarySizeTest.CanBeImplicitlyConvertedFromInt32" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlBinarySizeTest.CanBeImplicitlyConvertedToInt32" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlBinarySizeTest.DoesEqualItself" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlBinarySizeTest.DoesNotEqualNull" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlBinarySizeTest.DoesNotEqualObjectOfOtherType" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlBinarySizeTest.IsEquatable" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-suite type="ParameterizedTest" name="SizeMustBeWithinRange" executed="True" result="Success" success="True" time="0.006" asserts="0">
                            <results>
                              <test-case name="Paramol.Tests.SqlClient.TSqlBinarySizeTest.SizeMustBeWithinRange(0,True)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Paramol.Tests.SqlClient.TSqlBinarySizeTest.SizeMustBeWithinRange(-2,False)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Paramol.Tests.SqlClient.TSqlBinarySizeTest.SizeMustBeWithinRange(8000,True)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Paramol.Tests.SqlClient.TSqlBinarySizeTest.SizeMustBeWithinRange(8001,False)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Paramol.Tests.SqlClient.TSqlBinarySizeTest.SizeMustBeWithinRange(int.MinValue,False)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Paramol.Tests.SqlClient.TSqlBinarySizeTest.SizeMustBeWithinRange(-1,False)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Paramol.Tests.SqlClient.TSqlBinarySizeTest.SizeMustBeWithinRange(int.MaxValue,False)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                            </results>
                          </test-suite>
                          <test-case name="Paramol.Tests.SqlClient.TSqlBinarySizeTest.TwoInstancesAreEqualIfTheyHaveTheSameValue" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlBinarySizeTest.TwoInstancesAreNotEqualIfTheirValuesDiffer" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlBinarySizeTest.TwoInstancesAreNotOperatorEqualIfTheirValuesDiffer" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlBinarySizeTest.TwoInstancesAreOperatorEqualIfTheyHaveTheSameValue" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlBinarySizeTest.TwoInstancesDoNotHaveTheSameHashCodeIfTheirValuesDiffer" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlBinarySizeTest.TwoInstancesHaveTheSameHashCodeIfTheyHaveTheSameValue" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="TSqlBinaryValueTests" executed="True" result="Success" success="True" time="0.017" asserts="0">
                        <results>
                          <test-case name="Paramol.Tests.SqlClient.TSqlBinaryValueTests.DoesEqualItself" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlBinaryValueTests.DoesNotEqualNull" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlBinaryValueTests.DoesNotEqualOtherObjectType" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlBinaryValueTests.IsSqlParameterValue" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlBinaryValueTests.NullIsNotAnAcceptableValue" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlBinaryValueTests.ToDbParameterReturnsExpectedInstance" executed="True" result="Success" success="True" time="0.000" asserts="19" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlBinaryValueTests.ToSqlParameterReturnsExpectedInstance" executed="True" result="Success" success="True" time="0.000" asserts="17" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlBinaryValueTests.TwoInstanceAreEqualIfTheyHaveTheSameValueAndSize" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlBinaryValueTests.TwoInstanceAreNotEqualIfTheirSizeDiffers" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlBinaryValueTests.TwoInstanceAreNotEqualIfTheirValueContentDiffers" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlBinaryValueTests.TwoInstanceAreNotEqualIfTheirValueLengthDiffers" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlBinaryValueTests.TwoInstanceDoNotHaveTheSameHashCodeIfTheirSizeDiffers" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlBinaryValueTests.TwoInstanceDoNotHaveTheSameHashCodeIfTheirValueContentDiffers" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlBinaryValueTests.TwoInstanceDoNotHaveTheSameHashCodeIfTheirValueLengthDiffers" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlBinaryValueTests.TwoInstanceHaveTheSameHashCodeIfTheyHaveTheSameValueAndSize" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="TSqlBitNullValueTests" executed="True" result="Success" success="True" time="0.007" asserts="0">
                        <results>
                          <test-case name="Paramol.Tests.SqlClient.TSqlBitNullValueTests.DoesEqualItself" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlBitNullValueTests.DoesNotEqualNull" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlBitNullValueTests.DoesNotEqualOtherObjectType" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlBitNullValueTests.HasExpectedHashCode" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlBitNullValueTests.InstanceIsSqlNullValue" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlBitNullValueTests.IsSqlParameterValue" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlBitNullValueTests.ToDbParameterReturnsExpectedInstance" executed="True" result="Success" success="True" time="0.000" asserts="19" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlBitNullValueTests.ToSqlParameterReturnsExpectedInstance" executed="True" result="Success" success="True" time="0.000" asserts="17" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="TSqlBitValueTests" executed="True" result="Success" success="True" time="0.010" asserts="0">
                        <results>
                          <test-case name="Paramol.Tests.SqlClient.TSqlBitValueTests.DoesEqualItself" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlBitValueTests.DoesNotEqualNull" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlBitValueTests.DoesNotEqualOtherObjectType" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlBitValueTests.IsSqlParameterValue" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlBitValueTests.ToDbParameterReturnsExpectedInstance" executed="True" result="Success" success="True" time="0.000" asserts="19" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlBitValueTests.ToSqlParameterReturnsExpectedInstance" executed="True" result="Success" success="True" time="0.000" asserts="17" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlBitValueTests.TwoInstanceAreEqualIfTheyHaveTheSameValue" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlBitValueTests.TwoInstanceAreNotEqualIfTheirValueDiffers" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlBitValueTests.TwoInstanceDoNotHaveTheSameHashCodeIfTheirValueDiffers" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlBitValueTests.TwoInstanceHaveTheSameHashCodeIfTheyHaveTheSameValue" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="TSqlCharNullValueTests" executed="True" result="Success" success="True" time="0.007" asserts="0">
                        <results>
                          <test-case name="Paramol.Tests.SqlClient.TSqlCharNullValueTests.DoesEqualItself" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlCharNullValueTests.DoesNotEqualNull" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlCharNullValueTests.DoesNotEqualOtherObjectType" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlCharNullValueTests.HasExpectedHashCode" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlCharNullValueTests.IsSqlParameterValue" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlCharNullValueTests.ToDbParameterReturnsExpectedInstance" executed="True" result="Success" success="True" time="0.000" asserts="19" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlCharNullValueTests.ToSqlParameterReturnsExpectedInstance" executed="True" result="Success" success="True" time="0.000" asserts="17" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="TSqlCharSizeTest" executed="True" result="Success" success="True" time="0.021" asserts="0">
                        <results>
                          <test-case name="Paramol.Tests.SqlClient.TSqlCharSizeTest.CanBeImplicitlyConvertedFromInt32" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlCharSizeTest.CanBeImplicitlyConvertedToInt32" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlCharSizeTest.DoesEqualItself" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlCharSizeTest.DoesNotEqualNull" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlCharSizeTest.DoesNotEqualObjectOfOtherType" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlCharSizeTest.IsEquatable" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlCharSizeTest.MaxReturnsExpectedResult" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-suite type="ParameterizedTest" name="SizeMustBeWithinRange" executed="True" result="Success" success="True" time="0.006" asserts="0">
                            <results>
                              <test-case name="Paramol.Tests.SqlClient.TSqlCharSizeTest.SizeMustBeWithinRange(int.MinValue,False)" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                              <test-case name="Paramol.Tests.SqlClient.TSqlCharSizeTest.SizeMustBeWithinRange(int.MaxValue,False)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Paramol.Tests.SqlClient.TSqlCharSizeTest.SizeMustBeWithinRange(8001,False)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Paramol.Tests.SqlClient.TSqlCharSizeTest.SizeMustBeWithinRange(-1,True)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Paramol.Tests.SqlClient.TSqlCharSizeTest.SizeMustBeWithinRange(8000,True)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Paramol.Tests.SqlClient.TSqlCharSizeTest.SizeMustBeWithinRange(-2,False)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Paramol.Tests.SqlClient.TSqlCharSizeTest.SizeMustBeWithinRange(0,True)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                            </results>
                          </test-suite>
                          <test-case name="Paramol.Tests.SqlClient.TSqlCharSizeTest.TwoInstancesAreEqualIfTheyHaveTheSameValue" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlCharSizeTest.TwoInstancesAreNotEqualIfTheirValuesDiffer" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlCharSizeTest.TwoInstancesAreNotOperatorEqualIfTheirValuesDiffer" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlCharSizeTest.TwoInstancesAreOperatorEqualIfTheyHaveTheSameValue" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlCharSizeTest.TwoInstancesDoNotHaveTheSameHashCodeIfTheirValuesDiffer" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlCharSizeTest.TwoInstancesHaveTheSameHashCodeIfTheyHaveTheSameValue" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="TSqlCharValueTests" executed="True" result="Success" success="True" time="0.013" asserts="0">
                        <results>
                          <test-case name="Paramol.Tests.SqlClient.TSqlCharValueTests.DoesEqualItself" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlCharValueTests.DoesNotEqualNull" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlCharValueTests.DoesNotEqualOtherObjectType" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlCharValueTests.IsSqlParameterValue" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlCharValueTests.NullIsNotAnAcceptableValue" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlCharValueTests.ToDbParameterReturnsExpectedInstance" executed="True" result="Success" success="True" time="0.000" asserts="19" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlCharValueTests.ToSqlParameterReturnsExpectedInstance" executed="True" result="Success" success="True" time="0.000" asserts="17" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlCharValueTests.TwoInstanceAreEqualIfTheyHaveTheSameValueAndSize" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlCharValueTests.TwoInstanceAreNotEqualIfTheirSizeDiffers" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlCharValueTests.TwoInstanceAreNotEqualIfTheirValueDiffers" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlCharValueTests.TwoInstanceDoNotHaveTheSameHashCodeIfTheirSizeDiffers" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlCharValueTests.TwoInstanceDoNotHaveTheSameHashCodeIfTheirValueDiffers" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlCharValueTests.TwoInstanceHaveTheSameHashCodeIfTheyHaveTheSameValueAndSize" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="TSqlDateTime2NullValueTests" executed="True" result="Success" success="True" time="0.008" asserts="0">
                        <results>
                          <test-case name="Paramol.Tests.SqlClient.TSqlDateTime2NullValueTests.DoesEqualItself" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlDateTime2NullValueTests.DoesNotEqualNull" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlDateTime2NullValueTests.DoesNotEqualOtherObjectType" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlDateTime2NullValueTests.HasExpectedHashCode" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlDateTime2NullValueTests.IsSqlParameterValue" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlDateTime2NullValueTests.ToDbParameterReturnsExpectedInstance" executed="True" result="Success" success="True" time="0.000" asserts="19" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlDateTime2NullValueTests.ToSqlParameterReturnsExpectedInstance" executed="True" result="Success" success="True" time="0.002" asserts="17" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="TSqlDateTime2PrecisionTest" executed="True" result="Success" success="True" time="0.023" asserts="0">
                        <results>
                          <test-case name="Paramol.Tests.SqlClient.TSqlDateTime2PrecisionTest.CanBeImplicitlyConvertedFromByte" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlDateTime2PrecisionTest.CanBeImplicitlyConvertedToByte" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlDateTime2PrecisionTest.DoesEqualItself" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlDateTime2PrecisionTest.DoesNotEqualNull" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlDateTime2PrecisionTest.DoesNotEqualObjectOfOtherType" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlDateTime2PrecisionTest.IsEquatable" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-suite type="ParameterizedTest" name="SizeMustBeWithinRange" executed="True" result="Success" success="True" time="0.007" asserts="0">
                            <results>
                              <test-case name="Paramol.Tests.SqlClient.TSqlDateTime2PrecisionTest.SizeMustBeWithinRange(8,False)" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                              <test-case name="Paramol.Tests.SqlClient.TSqlDateTime2PrecisionTest.SizeMustBeWithinRange(2,True)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Paramol.Tests.SqlClient.TSqlDateTime2PrecisionTest.SizeMustBeWithinRange(1,True)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Paramol.Tests.SqlClient.TSqlDateTime2PrecisionTest.SizeMustBeWithinRange(4,True)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Paramol.Tests.SqlClient.TSqlDateTime2PrecisionTest.SizeMustBeWithinRange(5,True)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Paramol.Tests.SqlClient.TSqlDateTime2PrecisionTest.SizeMustBeWithinRange(6,True)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Paramol.Tests.SqlClient.TSqlDateTime2PrecisionTest.SizeMustBeWithinRange(7,True)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Paramol.Tests.SqlClient.TSqlDateTime2PrecisionTest.SizeMustBeWithinRange(0,True)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Paramol.Tests.SqlClient.TSqlDateTime2PrecisionTest.SizeMustBeWithinRange(3,True)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                            </results>
                          </test-suite>
                          <test-case name="Paramol.Tests.SqlClient.TSqlDateTime2PrecisionTest.TwoInstancesAreEqualIfTheyHaveTheSameValue" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlDateTime2PrecisionTest.TwoInstancesAreNotEqualIfTheirValuesDiffer" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlDateTime2PrecisionTest.TwoInstancesAreNotOperatorEqualIfTheirValuesDiffer" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlDateTime2PrecisionTest.TwoInstancesAreOperatorEqualIfTheyHaveTheSameValue" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlDateTime2PrecisionTest.TwoInstancesDoNotHaveTheSameHashCodeIfTheirValuesDiffer" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlDateTime2PrecisionTest.TwoInstancesHaveTheSameHashCodeIfTheyHaveTheSameValue" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="TSqlDateTime2ValueTests" executed="True" result="Success" success="True" time="0.014" asserts="0">
                        <results>
                          <test-case name="Paramol.Tests.SqlClient.TSqlDateTime2ValueTests.DoesEqualItself" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlDateTime2ValueTests.DoesNotEqualNull" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlDateTime2ValueTests.DoesNotEqualOtherObjectType" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlDateTime2ValueTests.IsSqlParameterValue" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlDateTime2ValueTests.ToDbParameterReturnsExpectedInstance" executed="True" result="Success" success="True" time="0.001" asserts="19" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlDateTime2ValueTests.ToSqlParameterReturnsExpectedInstance" executed="True" result="Success" success="True" time="0.000" asserts="17" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlDateTime2ValueTests.TwoInstanceAreEqualIfTheyHaveTheSameValueAndPrecision" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlDateTime2ValueTests.TwoInstanceAreNotEqualIfTheirPrecisionDiffers" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlDateTime2ValueTests.TwoInstanceAreNotEqualIfTheirValueDiffers" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlDateTime2ValueTests.TwoInstanceDoNotHaveTheSameHashCodeIfTheirSizeDiffers" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlDateTime2ValueTests.TwoInstanceDoNotHaveTheSameHashCodeIfTheirValueDiffers" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlDateTime2ValueTests.TwoInstanceHaveTheSameHashCodeIfTheyHaveTheSameValueAndSize" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="TSqlDateTimeNullValueTests" executed="True" result="Success" success="True" time="0.007" asserts="0">
                        <results>
                          <test-case name="Paramol.Tests.SqlClient.TSqlDateTimeNullValueTests.DoesEqualItself" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlDateTimeNullValueTests.DoesNotEqualNull" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlDateTimeNullValueTests.DoesNotEqualOtherObjectType" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlDateTimeNullValueTests.HasExpectedHashCode" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlDateTimeNullValueTests.InstanceIsSqlNullValue" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlDateTimeNullValueTests.IsSqlParameterValue" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlDateTimeNullValueTests.ToDbParameterReturnsExpectedInstance" executed="True" result="Success" success="True" time="0.000" asserts="19" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlDateTimeNullValueTests.ToSqlParameterReturnsExpectedInstance" executed="True" result="Success" success="True" time="0.000" asserts="17" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="TSqlDateTimeOffsetNullValueTests" executed="True" result="Success" success="True" time="0.007" asserts="0">
                        <results>
                          <test-case name="Paramol.Tests.SqlClient.TSqlDateTimeOffsetNullValueTests.DoesEqualItself" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlDateTimeOffsetNullValueTests.DoesNotEqualNull" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlDateTimeOffsetNullValueTests.DoesNotEqualOtherObjectType" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlDateTimeOffsetNullValueTests.HasExpectedHashCode" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlDateTimeOffsetNullValueTests.InstanceIsSqlNullValue" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlDateTimeOffsetNullValueTests.IsSqlParameterValue" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlDateTimeOffsetNullValueTests.ToDbParameterReturnsExpectedInstance" executed="True" result="Success" success="True" time="0.000" asserts="19" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlDateTimeOffsetNullValueTests.ToSqlParameterReturnsExpectedInstance" executed="True" result="Success" success="True" time="0.000" asserts="17" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="TSqlDateTimeOffsetValueTests" executed="True" result="Success" success="True" time="0.011" asserts="0">
                        <results>
                          <test-case name="Paramol.Tests.SqlClient.TSqlDateTimeOffsetValueTests.DoesEqualItself" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlDateTimeOffsetValueTests.DoesNotEqualNull" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlDateTimeOffsetValueTests.DoesNotEqualOtherObjectType" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlDateTimeOffsetValueTests.IsSqlParameterValue" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlDateTimeOffsetValueTests.ToDbParameterReturnsExpectedInstance" executed="True" result="Success" success="True" time="0.000" asserts="19" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlDateTimeOffsetValueTests.ToSqlParameterReturnsExpectedInstance" executed="True" result="Success" success="True" time="0.000" asserts="17" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlDateTimeOffsetValueTests.TwoInstanceAreEqualIfTheyHaveTheSameValue" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlDateTimeOffsetValueTests.TwoInstanceAreNotEqualIfTheirValueDiffers" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlDateTimeOffsetValueTests.TwoInstanceDoNotHaveTheSameHashCodeIfTheirValueDiffers" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlDateTimeOffsetValueTests.TwoInstanceHaveTheSameHashCodeIfTheyHaveTheSameValue" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="TSqlDateTimeValueTests" executed="True" result="Success" success="True" time="0.010" asserts="0">
                        <results>
                          <test-case name="Paramol.Tests.SqlClient.TSqlDateTimeValueTests.DoesEqualItself" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlDateTimeValueTests.DoesNotEqualNull" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlDateTimeValueTests.DoesNotEqualOtherObjectType" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlDateTimeValueTests.IsSqlParameterValue" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlDateTimeValueTests.ToDbParameterReturnsExpectedInstance" executed="True" result="Success" success="True" time="0.000" asserts="19" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlDateTimeValueTests.ToSqlParameterReturnsExpectedInstance" executed="True" result="Success" success="True" time="0.000" asserts="17" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlDateTimeValueTests.TwoInstanceAreEqualIfTheyHaveTheSameValue" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlDateTimeValueTests.TwoInstanceAreNotEqualIfTheirValueDiffers" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlDateTimeValueTests.TwoInstanceDoNotHaveTheSameHashCodeIfTheirValueDiffers" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlDateTimeValueTests.TwoInstanceHaveTheSameHashCodeIfTheyHaveTheSameValue" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="TSqlIntNullValueTests" executed="True" result="Success" success="True" time="0.007" asserts="0">
                        <results>
                          <test-case name="Paramol.Tests.SqlClient.TSqlIntNullValueTests.DoesEqualItself" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlIntNullValueTests.DoesNotEqualNull" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlIntNullValueTests.DoesNotEqualOtherObjectType" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlIntNullValueTests.HasExpectedHashCode" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlIntNullValueTests.InstanceIsSqlNullValue" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlIntNullValueTests.IsSqlParameterValue" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlIntNullValueTests.ToDbParameterReturnsExpectedInstance" executed="True" result="Success" success="True" time="0.000" asserts="19" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlIntNullValueTests.ToSqlParameterReturnsExpectedInstance" executed="True" result="Success" success="True" time="0.000" asserts="17" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="TSqlIntValueTests" executed="True" result="Success" success="True" time="0.010" asserts="0">
                        <results>
                          <test-case name="Paramol.Tests.SqlClient.TSqlIntValueTests.DoesEqualItself" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlIntValueTests.DoesNotEqualNull" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlIntValueTests.DoesNotEqualOtherObjectType" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlIntValueTests.IsSqlParameterValue" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlIntValueTests.ToDbParameterReturnsExpectedInstance" executed="True" result="Success" success="True" time="0.000" asserts="19" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlIntValueTests.ToSqlParameterReturnsExpectedInstance" executed="True" result="Success" success="True" time="0.000" asserts="17" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlIntValueTests.TwoInstanceAreEqualIfTheyHaveTheSameValue" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlIntValueTests.TwoInstanceAreNotEqualIfTheirValueDiffers" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlIntValueTests.TwoInstanceDoNotHaveTheSameHashCodeIfTheirValueDiffers" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlIntValueTests.TwoInstanceHaveTheSameHashCodeIfTheyHaveTheSameValue" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="TSqlMoneyNullValueTests" executed="True" result="Success" success="True" time="0.007" asserts="0">
                        <results>
                          <test-case name="Paramol.Tests.SqlClient.TSqlMoneyNullValueTests.DoesEqualItself" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlMoneyNullValueTests.DoesNotEqualNull" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlMoneyNullValueTests.DoesNotEqualOtherObjectType" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlMoneyNullValueTests.HasExpectedHashCode" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlMoneyNullValueTests.InstanceIsSqlNullValue" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlMoneyNullValueTests.IsSqlParameterValue" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlMoneyNullValueTests.ToDbParameterReturnsExpectedInstance" executed="True" result="Success" success="True" time="0.000" asserts="19" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlMoneyNullValueTests.ToSqlParameterReturnsExpectedInstance" executed="True" result="Success" success="True" time="0.000" asserts="17" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="TSqlMoneyValueTests" executed="True" result="Success" success="True" time="0.014" asserts="0">
                        <results>
                          <test-case name="Paramol.Tests.SqlClient.TSqlMoneyValueTests.DoesEqualItself" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlMoneyValueTests.DoesNotEqualNull" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlMoneyValueTests.DoesNotEqualOtherObjectType" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlMoneyValueTests.IsSqlParameterValue" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlMoneyValueTests.ToDbParameterReturnsExpectedInstance" executed="True" result="Success" success="True" time="0.002" asserts="19" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlMoneyValueTests.ToSqlParameterReturnsExpectedInstance" executed="True" result="Success" success="True" time="0.000" asserts="17" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlMoneyValueTests.TwoInstanceAreEqualIfTheyHaveTheSameValue" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlMoneyValueTests.TwoInstanceAreNotEqualIfTheirValueDiffers" executed="True" result="Success" success="True" time="0.002" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlMoneyValueTests.TwoInstanceDoNotHaveTheSameHashCodeIfTheirValueDiffers" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlMoneyValueTests.TwoInstanceHaveTheSameHashCodeIfTheyHaveTheSameValue" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="TSqlNCharNullValueTests" executed="True" result="Success" success="True" time="0.007" asserts="0">
                        <results>
                          <test-case name="Paramol.Tests.SqlClient.TSqlNCharNullValueTests.DoesEqualItself" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlNCharNullValueTests.DoesNotEqualNull" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlNCharNullValueTests.DoesNotEqualOtherObjectType" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlNCharNullValueTests.HasExpectedHashCode" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlNCharNullValueTests.IsSqlParameterValue" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlNCharNullValueTests.ToDbParameterReturnsExpectedInstance" executed="True" result="Success" success="True" time="0.000" asserts="19" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlNCharNullValueTests.ToSqlParameterReturnsExpectedInstance" executed="True" result="Success" success="True" time="0.000" asserts="17" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="TSqlNCharSizeTest" executed="True" result="Success" success="True" time="0.021" asserts="0">
                        <results>
                          <test-case name="Paramol.Tests.SqlClient.TSqlNCharSizeTest.CanBeImplicitlyConvertedFromInt32" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlNCharSizeTest.CanBeImplicitlyConvertedToInt32" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlNCharSizeTest.DoesEqualItself" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlNCharSizeTest.DoesNotEqualNull" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlNCharSizeTest.DoesNotEqualObjectOfOtherType" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlNCharSizeTest.IsEquatable" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlNCharSizeTest.MaxReturnsExpectedResult" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-suite type="ParameterizedTest" name="SizeMustBeWithinRange" executed="True" result="Success" success="True" time="0.006" asserts="0">
                            <results>
                              <test-case name="Paramol.Tests.SqlClient.TSqlNCharSizeTest.SizeMustBeWithinRange(-1,True)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Paramol.Tests.SqlClient.TSqlNCharSizeTest.SizeMustBeWithinRange(4000,True)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Paramol.Tests.SqlClient.TSqlNCharSizeTest.SizeMustBeWithinRange(-2,False)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Paramol.Tests.SqlClient.TSqlNCharSizeTest.SizeMustBeWithinRange(int.MaxValue,False)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Paramol.Tests.SqlClient.TSqlNCharSizeTest.SizeMustBeWithinRange(int.MinValue,False)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Paramol.Tests.SqlClient.TSqlNCharSizeTest.SizeMustBeWithinRange(4001,False)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Paramol.Tests.SqlClient.TSqlNCharSizeTest.SizeMustBeWithinRange(0,True)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                            </results>
                          </test-suite>
                          <test-case name="Paramol.Tests.SqlClient.TSqlNCharSizeTest.TwoInstancesAreEqualIfTheyHaveTheSameValue" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlNCharSizeTest.TwoInstancesAreNotEqualIfTheirValuesDiffer" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlNCharSizeTest.TwoInstancesAreNotOperatorEqualIfTheirValuesDiffer" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlNCharSizeTest.TwoInstancesAreOperatorEqualIfTheyHaveTheSameValue" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlNCharSizeTest.TwoInstancesDoNotHaveTheSameHashCodeIfTheirValuesDiffer" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlNCharSizeTest.TwoInstancesHaveTheSameHashCodeIfTheyHaveTheSameValue" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="TSqlNCharValueTests" executed="True" result="Success" success="True" time="0.013" asserts="0">
                        <results>
                          <test-case name="Paramol.Tests.SqlClient.TSqlNCharValueTests.DoesEqualItself" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlNCharValueTests.DoesNotEqualNull" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlNCharValueTests.DoesNotEqualOtherObjectType" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlNCharValueTests.IsSqlParameterValue" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlNCharValueTests.NullIsNotAnAcceptableValue" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlNCharValueTests.ToDbParameterReturnsExpectedInstance" executed="True" result="Success" success="True" time="0.000" asserts="19" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlNCharValueTests.ToSqlParameterReturnsExpectedInstance" executed="True" result="Success" success="True" time="0.000" asserts="17" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlNCharValueTests.TwoInstanceAreEqualIfTheyHaveTheSameValueAndSize" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlNCharValueTests.TwoInstanceAreNotEqualIfTheirSizeDiffers" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlNCharValueTests.TwoInstanceAreNotEqualIfTheirValueDiffers" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlNCharValueTests.TwoInstanceDoNotHaveTheSameHashCodeIfTheirSizeDiffers" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlNCharValueTests.TwoInstanceDoNotHaveTheSameHashCodeIfTheirValueDiffers" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlNCharValueTests.TwoInstanceHaveTheSameHashCodeIfTheyHaveTheSameValueAndSize" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="TSqlNVarCharNullValueTests" executed="True" result="Success" success="True" time="0.007" asserts="0">
                        <results>
                          <test-case name="Paramol.Tests.SqlClient.TSqlNVarCharNullValueTests.DoesEqualItself" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlNVarCharNullValueTests.DoesNotEqualNull" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlNVarCharNullValueTests.DoesNotEqualOtherObjectType" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlNVarCharNullValueTests.HasExpectedHashCode" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlNVarCharNullValueTests.IsSqlParameterValue" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlNVarCharNullValueTests.ToDbParameterReturnsExpectedInstance" executed="True" result="Success" success="True" time="0.000" asserts="19" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlNVarCharNullValueTests.ToSqlParameterReturnsExpectedInstance" executed="True" result="Success" success="True" time="0.000" asserts="17" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="TSqlNVarCharSizeTest" executed="True" result="Success" success="True" time="0.021" asserts="0">
                        <results>
                          <test-case name="Paramol.Tests.SqlClient.TSqlNVarCharSizeTest.CanBeImplicitlyConvertedFromInt32" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlNVarCharSizeTest.CanBeImplicitlyConvertedToInt32" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlNVarCharSizeTest.DoesEqualItself" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlNVarCharSizeTest.DoesNotEqualNull" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlNVarCharSizeTest.DoesNotEqualObjectOfOtherType" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlNVarCharSizeTest.IsEquatable" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlNVarCharSizeTest.MaxReturnsExpectedResult" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-suite type="ParameterizedTest" name="SizeMustBeWithinRange" executed="True" result="Success" success="True" time="0.006" asserts="0">
                            <results>
                              <test-case name="Paramol.Tests.SqlClient.TSqlNVarCharSizeTest.SizeMustBeWithinRange(4000,True)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Paramol.Tests.SqlClient.TSqlNVarCharSizeTest.SizeMustBeWithinRange(int.MinValue,False)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Paramol.Tests.SqlClient.TSqlNVarCharSizeTest.SizeMustBeWithinRange(-2,False)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Paramol.Tests.SqlClient.TSqlNVarCharSizeTest.SizeMustBeWithinRange(-1,True)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Paramol.Tests.SqlClient.TSqlNVarCharSizeTest.SizeMustBeWithinRange(0,True)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Paramol.Tests.SqlClient.TSqlNVarCharSizeTest.SizeMustBeWithinRange(4001,False)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Paramol.Tests.SqlClient.TSqlNVarCharSizeTest.SizeMustBeWithinRange(int.MaxValue,False)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                            </results>
                          </test-suite>
                          <test-case name="Paramol.Tests.SqlClient.TSqlNVarCharSizeTest.TwoInstancesAreEqualIfTheyHaveTheSameValue" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlNVarCharSizeTest.TwoInstancesAreNotEqualIfTheirValuesDiffer" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlNVarCharSizeTest.TwoInstancesAreNotOperatorEqualIfTheirValuesDiffer" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlNVarCharSizeTest.TwoInstancesAreOperatorEqualIfTheyHaveTheSameValue" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlNVarCharSizeTest.TwoInstancesDoNotHaveTheSameHashCodeIfTheirValuesDiffer" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlNVarCharSizeTest.TwoInstancesHaveTheSameHashCodeIfTheyHaveTheSameValue" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="TSqlNVarCharValueTests" executed="True" result="Success" success="True" time="0.013" asserts="0">
                        <results>
                          <test-case name="Paramol.Tests.SqlClient.TSqlNVarCharValueTests.DoesEqualItself" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlNVarCharValueTests.DoesNotEqualNull" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlNVarCharValueTests.DoesNotEqualOtherObjectType" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlNVarCharValueTests.IsSqlParameterValue" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlNVarCharValueTests.NullIsNotAnAcceptableValue" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlNVarCharValueTests.ToDbParameterReturnsExpectedInstance" executed="True" result="Success" success="True" time="0.000" asserts="19" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlNVarCharValueTests.ToSqlParameterReturnsExpectedInstance" executed="True" result="Success" success="True" time="0.000" asserts="17" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlNVarCharValueTests.TwoInstanceAreEqualIfTheyHaveTheSameValueAndSize" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlNVarCharValueTests.TwoInstanceAreNotEqualIfTheirSizeDiffers" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlNVarCharValueTests.TwoInstanceAreNotEqualIfTheirValueDiffers" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlNVarCharValueTests.TwoInstanceDoNotHaveTheSameHashCodeIfTheirSizeDiffers" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlNVarCharValueTests.TwoInstanceDoNotHaveTheSameHashCodeIfTheirValueDiffers" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlNVarCharValueTests.TwoInstanceHaveTheSameHashCodeIfTheyHaveTheSameValueAndSize" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="TSqlTests" executed="True" result="Success" success="True" time="0.676" asserts="0">
                        <results>
                          <test-case name="Paramol.Tests.SqlClient.TSqlTests.BigIntNullReturnsExpectedInstance" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlTests.BigIntReturnsExpectedInstance" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlTests.BinaryNullReturnsExpectedInstance" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlTests.BinaryReturnsExpectedInstance" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlTests.BitNullReturnsExpectedInstance" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlTests.BitReturnsExpectedInstance" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlTests.CharNullReturnsExpectedInstance" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlTests.CharReturnsExpectedInstance" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlTests.ComposeCommandArrayCanNotBeNull" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlTests.ComposeCommandArrayReturnsComposer" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlTests.ComposeCommandEnumerationCanNotBeNull" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlTests.ComposeCommandEnumerationReturnsComposer" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlTests.ComposedCommandArrayIsPreservedAndReturnedByComposer" executed="True" result="Success" success="True" time="0.002" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlTests.ComposedCommandEnumerationIsPreservedAndReturnedByComposer" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlTests.ComposedIfCommandArrayIsNotPreservedAndReturnedByComposerWhenConditionIsFalse" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlTests.ComposedIfCommandArrayIsPreservedAndReturnedByComposerWhenConditionIsTrue" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlTests.ComposedIfCommandEnumerationIsNotPreservedAndReturnedByComposerWhenConditionIsFalse" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlTests.ComposedIfCommandEnumerationIsPreservedAndReturnedByComposerWhenConditionIsTrue" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlTests.ComposedUnlessCommandArrayIsNotPreservedAndReturnedByComposerWhenConditionIsTrue" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlTests.ComposedUnlessCommandArrayIsPreservedAndReturnedByComposerWhenConditionIsFalse" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlTests.ComposedUnlessCommandEnumerationIsNotPreservedAndReturnedByComposerWhenConditionIsTrue" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlTests.ComposedUnlessCommandEnumerationIsPreservedAndReturnedByComposerWhenConditionIsFalse" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlTests.ComposeIfCommandArrayCanBeNullWhenConditionIsFalse" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlTests.ComposeIfCommandArrayCanNotBeNullWhenConditionIsTrue" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-suite type="ParameterizedTest" name="ComposeIfCommandArrayReturnsComposer" executed="True" result="Success" success="True" time="0.001" asserts="0">
                            <results>
                              <test-case name="Paramol.Tests.SqlClient.TSqlTests.ComposeIfCommandArrayReturnsComposer(True)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Paramol.Tests.SqlClient.TSqlTests.ComposeIfCommandArrayReturnsComposer(False)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                            </results>
                          </test-suite>
                          <test-case name="Paramol.Tests.SqlClient.TSqlTests.ComposeIfCommandEnumerationCanBeNullWhenConditionIsFalse" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlTests.ComposeIfCommandEnumerationCanNotBeNullWhenConditionIsTrue" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-suite type="ParameterizedTest" name="ComposeIfCommandEnumerationReturnsComposer" executed="True" result="Success" success="True" time="0.001" asserts="0">
                            <results>
                              <test-case name="Paramol.Tests.SqlClient.TSqlTests.ComposeIfCommandEnumerationReturnsComposer(True)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Paramol.Tests.SqlClient.TSqlTests.ComposeIfCommandEnumerationReturnsComposer(False)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                            </results>
                          </test-suite>
                          <test-case name="Paramol.Tests.SqlClient.TSqlTests.ComposeUnlessCommandArrayCanBeNullWhenConditionIsTrue" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlTests.ComposeUnlessCommandArrayCanNotBeNullWhenConditionIsFalse" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-suite type="ParameterizedTest" name="ComposeUnlessCommandArrayReturnsComposer" executed="True" result="Success" success="True" time="0.001" asserts="0">
                            <results>
                              <test-case name="Paramol.Tests.SqlClient.TSqlTests.ComposeUnlessCommandArrayReturnsComposer(True)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Paramol.Tests.SqlClient.TSqlTests.ComposeUnlessCommandArrayReturnsComposer(False)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                            </results>
                          </test-suite>
                          <test-case name="Paramol.Tests.SqlClient.TSqlTests.ComposeUnlessCommandEnumerationCanBeNullWhenConditionIsTrue" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlTests.ComposeUnlessCommandEnumerationCanNotBeNullWhenConditionIsFalse" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-suite type="ParameterizedTest" name="ComposeUnlessCommandEnumerationReturnsComposer" executed="True" result="Success" success="True" time="0.001" asserts="0">
                            <results>
                              <test-case name="Paramol.Tests.SqlClient.TSqlTests.ComposeUnlessCommandEnumerationReturnsComposer(True)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Paramol.Tests.SqlClient.TSqlTests.ComposeUnlessCommandEnumerationReturnsComposer(False)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                            </results>
                          </test-suite>
                          <test-case name="Paramol.Tests.SqlClient.TSqlTests.DateTime2NullReturnsExpectedInstance" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlTests.DateTime2ReturnsExpectedInstance" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlTests.DateTimeNullReturnsExpectedInstance" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlTests.DateTimeOffsetNullReturnsExpectedInstance" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlTests.DateTimeOffsetReturnsExpectedInstance" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlTests.DateTimeReturnsExpectedInstance" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlTests.IntNullReturnsExpectedInstance" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlTests.IntReturnsExpectedInstance" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlTests.MoneyNullReturnsExpectedInstance" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlTests.MoneyReturnsExpectedInstance" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlTests.NCharNullReturnsExpectedInstance" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlTests.NCharReturnsExpectedInstance" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlTests.NonQueryProcedureFormatIfParameterCountLimitedTo2098WhenConditionIsMet" executed="True" result="Success" success="True" time="0.197" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlTests.NonQueryProcedureFormatIfParameterCountNotLimitedTo2098WhenConditionIsNotMet" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-suite type="ParameterizedTest" name="NonQueryProcedureFormatIfReturnsExpectedInstance" executed="True" result="Success" success="True" time="0.014" asserts="0">
                            <results>
                              <test-case name="Paramol.Tests.SqlClient.TSqlTests.NonQueryProcedureFormatIfReturnsExpectedInstance(Paramol.SqlClient.TSql+&lt;NonQueryProcedureFormatIf&gt;d__a,Paramol.SqlNonQueryCommand[])" executed="True" result="Success" success="True" time="0.001" asserts="3" />
                              <test-case name="Paramol.Tests.SqlClient.TSqlTests.NonQueryProcedureFormatIfReturnsExpectedInstance(Paramol.SqlClient.TSql+&lt;NonQueryProcedureFormatIf&gt;d__a,Paramol.SqlNonQueryCommand[])" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                              <test-case name="Paramol.Tests.SqlClient.TSqlTests.NonQueryProcedureFormatIfReturnsExpectedInstance(Paramol.SqlClient.TSql+&lt;NonQueryProcedureFormatIf&gt;d__a,Paramol.SqlNonQueryCommand[])" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                              <test-case name="Paramol.Tests.SqlClient.TSqlTests.NonQueryProcedureFormatIfReturnsExpectedInstance(Paramol.SqlClient.TSql+&lt;NonQueryProcedureFormatIf&gt;d__a,Paramol.SqlNonQueryCommand[])" executed="True" result="Success" success="True" time="0.002" asserts="3" />
                              <test-case name="Paramol.Tests.SqlClient.TSqlTests.NonQueryProcedureFormatIfReturnsExpectedInstance(Paramol.SqlClient.TSql+&lt;NonQueryProcedureFormatIf&gt;d__a,Paramol.SqlNonQueryCommand[])" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                              <test-case name="Paramol.Tests.SqlClient.TSqlTests.NonQueryProcedureFormatIfReturnsExpectedInstance(Paramol.SqlClient.TSql+&lt;NonQueryProcedureFormatIf&gt;d__a,Paramol.SqlNonQueryCommand[])" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                              <test-case name="Paramol.Tests.SqlClient.TSqlTests.NonQueryProcedureFormatIfReturnsExpectedInstance(Paramol.SqlClient.TSql+&lt;NonQueryProcedureFormatIf&gt;d__a,Paramol.SqlNonQueryCommand[])" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                              <test-case name="Paramol.Tests.SqlClient.TSqlTests.NonQueryProcedureFormatIfReturnsExpectedInstance(Paramol.SqlClient.TSql+&lt;NonQueryProcedureFormatIf&gt;d__a,Paramol.SqlNonQueryCommand[])" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Paramol.Tests.SqlClient.TSqlTests.NonQueryProcedureFormatIfReturnsExpectedInstance(Paramol.SqlClient.TSql+&lt;NonQueryProcedureFormatIf&gt;d__a,Paramol.SqlNonQueryCommand[])" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Paramol.Tests.SqlClient.TSqlTests.NonQueryProcedureFormatIfReturnsExpectedInstance(Paramol.SqlClient.TSql+&lt;NonQueryProcedureFormatIf&gt;d__a,Paramol.SqlNonQueryCommand[])" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Paramol.Tests.SqlClient.TSqlTests.NonQueryProcedureFormatIfReturnsExpectedInstance(Paramol.SqlClient.TSql+&lt;NonQueryProcedureFormatIf&gt;d__a,Paramol.SqlNonQueryCommand[])" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Paramol.Tests.SqlClient.TSqlTests.NonQueryProcedureFormatIfReturnsExpectedInstance(Paramol.SqlClient.TSql+&lt;NonQueryProcedureFormatIf&gt;d__a,Paramol.SqlNonQueryCommand[])" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Paramol.Tests.SqlClient.TSqlTests.NonQueryProcedureFormatIfReturnsExpectedInstance(Paramol.SqlClient.TSql+&lt;NonQueryProcedureFormatIf&gt;d__a,Paramol.SqlNonQueryCommand[])" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Paramol.Tests.SqlClient.TSqlTests.NonQueryProcedureFormatIfReturnsExpectedInstance(Paramol.SqlClient.TSql+&lt;NonQueryProcedureFormatIf&gt;d__a,Paramol.SqlNonQueryCommand[])" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                            </results>
                          </test-suite>
                          <test-case name="Paramol.Tests.SqlClient.TSqlTests.NonQueryProcedureFormatParameterCountLimitedTo2098" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-suite type="ParameterizedTest" name="NonQueryProcedureFormatReturnsExpectedInstance" executed="True" result="Success" success="True" time="0.006" asserts="0">
                            <results>
                              <test-case name="Paramol.Tests.SqlClient.TSqlTests.NonQueryProcedureFormatReturnsExpectedInstance(Paramol.SqlNonQueryCommand,Paramol.SqlNonQueryCommand)" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                              <test-case name="Paramol.Tests.SqlClient.TSqlTests.NonQueryProcedureFormatReturnsExpectedInstance(Paramol.SqlNonQueryCommand,Paramol.SqlNonQueryCommand)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="Paramol.Tests.SqlClient.TSqlTests.NonQueryProcedureFormatReturnsExpectedInstance(Paramol.SqlNonQueryCommand,Paramol.SqlNonQueryCommand)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="Paramol.Tests.SqlClient.TSqlTests.NonQueryProcedureFormatReturnsExpectedInstance(Paramol.SqlNonQueryCommand,Paramol.SqlNonQueryCommand)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="Paramol.Tests.SqlClient.TSqlTests.NonQueryProcedureFormatReturnsExpectedInstance(Paramol.SqlNonQueryCommand,Paramol.SqlNonQueryCommand)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="Paramol.Tests.SqlClient.TSqlTests.NonQueryProcedureFormatReturnsExpectedInstance(Paramol.SqlNonQueryCommand,Paramol.SqlNonQueryCommand)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="Paramol.Tests.SqlClient.TSqlTests.NonQueryProcedureFormatReturnsExpectedInstance(Paramol.SqlNonQueryCommand,Paramol.SqlNonQueryCommand)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                            </results>
                          </test-suite>
                          <test-case name="Paramol.Tests.SqlClient.TSqlTests.NonQueryProcedureFormatUnlessParameterCountLimitedTo2098WhenConditionIsMet" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlTests.NonQueryProcedureFormatUnlessParameterCountNotLimitedTo2098WhenConditionIsMet" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-suite type="ParameterizedTest" name="NonQueryProcedureFormatUnlessReturnsExpectedInstance" executed="True" result="Success" success="True" time="0.012" asserts="0">
                            <results>
                              <test-case name="Paramol.Tests.SqlClient.TSqlTests.NonQueryProcedureFormatUnlessReturnsExpectedInstance(Paramol.SqlClient.TSql+&lt;NonQueryProcedureFormatUnless&gt;d__d,Paramol.SqlNonQueryCommand[])" executed="True" result="Success" success="True" time="0.001" asserts="3" />
                              <test-case name="Paramol.Tests.SqlClient.TSqlTests.NonQueryProcedureFormatUnlessReturnsExpectedInstance(Paramol.SqlClient.TSql+&lt;NonQueryProcedureFormatUnless&gt;d__d,Paramol.SqlNonQueryCommand[])" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                              <test-case name="Paramol.Tests.SqlClient.TSqlTests.NonQueryProcedureFormatUnlessReturnsExpectedInstance(Paramol.SqlClient.TSql+&lt;NonQueryProcedureFormatUnless&gt;d__d,Paramol.SqlNonQueryCommand[])" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                              <test-case name="Paramol.Tests.SqlClient.TSqlTests.NonQueryProcedureFormatUnlessReturnsExpectedInstance(Paramol.SqlClient.TSql+&lt;NonQueryProcedureFormatUnless&gt;d__d,Paramol.SqlNonQueryCommand[])" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                              <test-case name="Paramol.Tests.SqlClient.TSqlTests.NonQueryProcedureFormatUnlessReturnsExpectedInstance(Paramol.SqlClient.TSql+&lt;NonQueryProcedureFormatUnless&gt;d__d,Paramol.SqlNonQueryCommand[])" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                              <test-case name="Paramol.Tests.SqlClient.TSqlTests.NonQueryProcedureFormatUnlessReturnsExpectedInstance(Paramol.SqlClient.TSql+&lt;NonQueryProcedureFormatUnless&gt;d__d,Paramol.SqlNonQueryCommand[])" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                              <test-case name="Paramol.Tests.SqlClient.TSqlTests.NonQueryProcedureFormatUnlessReturnsExpectedInstance(Paramol.SqlClient.TSql+&lt;NonQueryProcedureFormatUnless&gt;d__d,Paramol.SqlNonQueryCommand[])" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                              <test-case name="Paramol.Tests.SqlClient.TSqlTests.NonQueryProcedureFormatUnlessReturnsExpectedInstance(Paramol.SqlClient.TSql+&lt;NonQueryProcedureFormatUnless&gt;d__d,Paramol.SqlNonQueryCommand[])" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Paramol.Tests.SqlClient.TSqlTests.NonQueryProcedureFormatUnlessReturnsExpectedInstance(Paramol.SqlClient.TSql+&lt;NonQueryProcedureFormatUnless&gt;d__d,Paramol.SqlNonQueryCommand[])" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Paramol.Tests.SqlClient.TSqlTests.NonQueryProcedureFormatUnlessReturnsExpectedInstance(Paramol.SqlClient.TSql+&lt;NonQueryProcedureFormatUnless&gt;d__d,Paramol.SqlNonQueryCommand[])" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Paramol.Tests.SqlClient.TSqlTests.NonQueryProcedureFormatUnlessReturnsExpectedInstance(Paramol.SqlClient.TSql+&lt;NonQueryProcedureFormatUnless&gt;d__d,Paramol.SqlNonQueryCommand[])" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Paramol.Tests.SqlClient.TSqlTests.NonQueryProcedureFormatUnlessReturnsExpectedInstance(Paramol.SqlClient.TSql+&lt;NonQueryProcedureFormatUnless&gt;d__d,Paramol.SqlNonQueryCommand[])" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Paramol.Tests.SqlClient.TSqlTests.NonQueryProcedureFormatUnlessReturnsExpectedInstance(Paramol.SqlClient.TSql+&lt;NonQueryProcedureFormatUnless&gt;d__d,Paramol.SqlNonQueryCommand[])" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Paramol.Tests.SqlClient.TSqlTests.NonQueryProcedureFormatUnlessReturnsExpectedInstance(Paramol.SqlClient.TSql+&lt;NonQueryProcedureFormatUnless&gt;d__d,Paramol.SqlNonQueryCommand[])" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                            </results>
                          </test-suite>
                          <test-case name="Paramol.Tests.SqlClient.TSqlTests.NonQueryProcedureIfParameterCountLimitedTo2098WhenConditionIsMet" executed="True" result="Success" success="True" time="0.034" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlTests.NonQueryProcedureIfParameterCountNotLimitedTo2098WhenConditionIsNotMet" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-suite type="ParameterizedTest" name="NonQueryProcedureIfReturnsExpectedInstance" executed="True" result="Success" success="True" time="0.008" asserts="0">
                            <results>
                              <test-case name="Paramol.Tests.SqlClient.TSqlTests.NonQueryProcedureIfReturnsExpectedInstance(Paramol.SqlClient.TSql+&lt;NonQueryProcedureIf&gt;d__0,Paramol.SqlNonQueryCommand[])" executed="True" result="Success" success="True" time="0.001" asserts="3" />
                              <test-case name="Paramol.Tests.SqlClient.TSqlTests.NonQueryProcedureIfReturnsExpectedInstance(Paramol.SqlClient.TSql+&lt;NonQueryProcedureIf&gt;d__0,Paramol.SqlNonQueryCommand[])" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                              <test-case name="Paramol.Tests.SqlClient.TSqlTests.NonQueryProcedureIfReturnsExpectedInstance(Paramol.SqlClient.TSql+&lt;NonQueryProcedureIf&gt;d__0,Paramol.SqlNonQueryCommand[])" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                              <test-case name="Paramol.Tests.SqlClient.TSqlTests.NonQueryProcedureIfReturnsExpectedInstance(Paramol.SqlClient.TSql+&lt;NonQueryProcedureIf&gt;d__0,Paramol.SqlNonQueryCommand[])" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                              <test-case name="Paramol.Tests.SqlClient.TSqlTests.NonQueryProcedureIfReturnsExpectedInstance(Paramol.SqlClient.TSql+&lt;NonQueryProcedureIf&gt;d__0,Paramol.SqlNonQueryCommand[])" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                              <test-case name="Paramol.Tests.SqlClient.TSqlTests.NonQueryProcedureIfReturnsExpectedInstance(Paramol.SqlClient.TSql+&lt;NonQueryProcedureIf&gt;d__0,Paramol.SqlNonQueryCommand[])" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Paramol.Tests.SqlClient.TSqlTests.NonQueryProcedureIfReturnsExpectedInstance(Paramol.SqlClient.TSql+&lt;NonQueryProcedureIf&gt;d__0,Paramol.SqlNonQueryCommand[])" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Paramol.Tests.SqlClient.TSqlTests.NonQueryProcedureIfReturnsExpectedInstance(Paramol.SqlClient.TSql+&lt;NonQueryProcedureIf&gt;d__0,Paramol.SqlNonQueryCommand[])" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Paramol.Tests.SqlClient.TSqlTests.NonQueryProcedureIfReturnsExpectedInstance(Paramol.SqlClient.TSql+&lt;NonQueryProcedureIf&gt;d__0,Paramol.SqlNonQueryCommand[])" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Paramol.Tests.SqlClient.TSqlTests.NonQueryProcedureIfReturnsExpectedInstance(Paramol.SqlClient.TSql+&lt;NonQueryProcedureIf&gt;d__0,Paramol.SqlNonQueryCommand[])" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                            </results>
                          </test-suite>
                          <test-case name="Paramol.Tests.SqlClient.TSqlTests.NonQueryProcedureParameterCountLimitedTo2098" executed="True" result="Success" success="True" time="0.002" asserts="1" />
                          <test-suite type="ParameterizedTest" name="NonQueryProcedureReturnsExpectedInstance" executed="True" result="Success" success="True" time="0.005" asserts="0">
                            <results>
                              <test-case name="Paramol.Tests.SqlClient.TSqlTests.NonQueryProcedureReturnsExpectedInstance(Paramol.SqlNonQueryCommand,Paramol.SqlNonQueryCommand)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="Paramol.Tests.SqlClient.TSqlTests.NonQueryProcedureReturnsExpectedInstance(Paramol.SqlNonQueryCommand,Paramol.SqlNonQueryCommand)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="Paramol.Tests.SqlClient.TSqlTests.NonQueryProcedureReturnsExpectedInstance(Paramol.SqlNonQueryCommand,Paramol.SqlNonQueryCommand)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="Paramol.Tests.SqlClient.TSqlTests.NonQueryProcedureReturnsExpectedInstance(Paramol.SqlNonQueryCommand,Paramol.SqlNonQueryCommand)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="Paramol.Tests.SqlClient.TSqlTests.NonQueryProcedureReturnsExpectedInstance(Paramol.SqlNonQueryCommand,Paramol.SqlNonQueryCommand)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                            </results>
                          </test-suite>
                          <test-case name="Paramol.Tests.SqlClient.TSqlTests.NonQueryProcedureUnlessParameterCountLimitedTo2098WhenConditionIsMet" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlTests.NonQueryProcedureUnlessParameterCountNotLimitedTo2098WhenConditionIsMet" executed="True" result="Success" success="True" time="0.028" asserts="1" />
                          <test-suite type="ParameterizedTest" name="NonQueryProcedureUnlessReturnsExpectedInstance" executed="True" result="Success" success="True" time="0.008" asserts="0">
                            <results>
                              <test-case name="Paramol.Tests.SqlClient.TSqlTests.NonQueryProcedureUnlessReturnsExpectedInstance(Paramol.SqlClient.TSql+&lt;NonQueryProcedureUnless&gt;d__3,Paramol.SqlNonQueryCommand[])" executed="True" result="Success" success="True" time="0.001" asserts="3" />
                              <test-case name="Paramol.Tests.SqlClient.TSqlTests.NonQueryProcedureUnlessReturnsExpectedInstance(Paramol.SqlClient.TSql+&lt;NonQueryProcedureUnless&gt;d__3,Paramol.SqlNonQueryCommand[])" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                              <test-case name="Paramol.Tests.SqlClient.TSqlTests.NonQueryProcedureUnlessReturnsExpectedInstance(Paramol.SqlClient.TSql+&lt;NonQueryProcedureUnless&gt;d__3,Paramol.SqlNonQueryCommand[])" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                              <test-case name="Paramol.Tests.SqlClient.TSqlTests.NonQueryProcedureUnlessReturnsExpectedInstance(Paramol.SqlClient.TSql+&lt;NonQueryProcedureUnless&gt;d__3,Paramol.SqlNonQueryCommand[])" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                              <test-case name="Paramol.Tests.SqlClient.TSqlTests.NonQueryProcedureUnlessReturnsExpectedInstance(Paramol.SqlClient.TSql+&lt;NonQueryProcedureUnless&gt;d__3,Paramol.SqlNonQueryCommand[])" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                              <test-case name="Paramol.Tests.SqlClient.TSqlTests.NonQueryProcedureUnlessReturnsExpectedInstance(Paramol.SqlClient.TSql+&lt;NonQueryProcedureUnless&gt;d__3,Paramol.SqlNonQueryCommand[])" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Paramol.Tests.SqlClient.TSqlTests.NonQueryProcedureUnlessReturnsExpectedInstance(Paramol.SqlClient.TSql+&lt;NonQueryProcedureUnless&gt;d__3,Paramol.SqlNonQueryCommand[])" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Paramol.Tests.SqlClient.TSqlTests.NonQueryProcedureUnlessReturnsExpectedInstance(Paramol.SqlClient.TSql+&lt;NonQueryProcedureUnless&gt;d__3,Paramol.SqlNonQueryCommand[])" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Paramol.Tests.SqlClient.TSqlTests.NonQueryProcedureUnlessReturnsExpectedInstance(Paramol.SqlClient.TSql+&lt;NonQueryProcedureUnless&gt;d__3,Paramol.SqlNonQueryCommand[])" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Paramol.Tests.SqlClient.TSqlTests.NonQueryProcedureUnlessReturnsExpectedInstance(Paramol.SqlClient.TSql+&lt;NonQueryProcedureUnless&gt;d__3,Paramol.SqlNonQueryCommand[])" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                            </results>
                          </test-suite>
                          <test-case name="Paramol.Tests.SqlClient.TSqlTests.NonQueryStatementFormatIfParameterCountLimitedTo2098WhenConditionIsMet" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlTests.NonQueryStatementFormatIfParameterCountNotLimitedTo2098WhenConditionIsNotMet" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-suite type="ParameterizedTest" name="NonQueryStatementFormatIfReturnsExpectedInstance" executed="True" result="Success" success="True" time="0.012" asserts="0">
                            <results>
                              <test-case name="Paramol.Tests.SqlClient.TSqlTests.NonQueryStatementFormatIfReturnsExpectedInstance(Paramol.SqlClient.TSql+&lt;NonQueryStatementFormatIf&gt;d__1a,Paramol.SqlNonQueryCommand[])" executed="True" result="Success" success="True" time="0.001" asserts="3" />
                              <test-case name="Paramol.Tests.SqlClient.TSqlTests.NonQueryStatementFormatIfReturnsExpectedInstance(Paramol.SqlClient.TSql+&lt;NonQueryStatementFormatIf&gt;d__1a,Paramol.SqlNonQueryCommand[])" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                              <test-case name="Paramol.Tests.SqlClient.TSqlTests.NonQueryStatementFormatIfReturnsExpectedInstance(Paramol.SqlClient.TSql+&lt;NonQueryStatementFormatIf&gt;d__1a,Paramol.SqlNonQueryCommand[])" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                              <test-case name="Paramol.Tests.SqlClient.TSqlTests.NonQueryStatementFormatIfReturnsExpectedInstance(Paramol.SqlClient.TSql+&lt;NonQueryStatementFormatIf&gt;d__1a,Paramol.SqlNonQueryCommand[])" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                              <test-case name="Paramol.Tests.SqlClient.TSqlTests.NonQueryStatementFormatIfReturnsExpectedInstance(Paramol.SqlClient.TSql+&lt;NonQueryStatementFormatIf&gt;d__1a,Paramol.SqlNonQueryCommand[])" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                              <test-case name="Paramol.Tests.SqlClient.TSqlTests.NonQueryStatementFormatIfReturnsExpectedInstance(Paramol.SqlClient.TSql+&lt;NonQueryStatementFormatIf&gt;d__1a,Paramol.SqlNonQueryCommand[])" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                              <test-case name="Paramol.Tests.SqlClient.TSqlTests.NonQueryStatementFormatIfReturnsExpectedInstance(Paramol.SqlClient.TSql+&lt;NonQueryStatementFormatIf&gt;d__1a,Paramol.SqlNonQueryCommand[])" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                              <test-case name="Paramol.Tests.SqlClient.TSqlTests.NonQueryStatementFormatIfReturnsExpectedInstance(Paramol.SqlClient.TSql+&lt;NonQueryStatementFormatIf&gt;d__1a,Paramol.SqlNonQueryCommand[])" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Paramol.Tests.SqlClient.TSqlTests.NonQueryStatementFormatIfReturnsExpectedInstance(Paramol.SqlClient.TSql+&lt;NonQueryStatementFormatIf&gt;d__1a,Paramol.SqlNonQueryCommand[])" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Paramol.Tests.SqlClient.TSqlTests.NonQueryStatementFormatIfReturnsExpectedInstance(Paramol.SqlClient.TSql+&lt;NonQueryStatementFormatIf&gt;d__1a,Paramol.SqlNonQueryCommand[])" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Paramol.Tests.SqlClient.TSqlTests.NonQueryStatementFormatIfReturnsExpectedInstance(Paramol.SqlClient.TSql+&lt;NonQueryStatementFormatIf&gt;d__1a,Paramol.SqlNonQueryCommand[])" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Paramol.Tests.SqlClient.TSqlTests.NonQueryStatementFormatIfReturnsExpectedInstance(Paramol.SqlClient.TSql+&lt;NonQueryStatementFormatIf&gt;d__1a,Paramol.SqlNonQueryCommand[])" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Paramol.Tests.SqlClient.TSqlTests.NonQueryStatementFormatIfReturnsExpectedInstance(Paramol.SqlClient.TSql+&lt;NonQueryStatementFormatIf&gt;d__1a,Paramol.SqlNonQueryCommand[])" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Paramol.Tests.SqlClient.TSqlTests.NonQueryStatementFormatIfReturnsExpectedInstance(Paramol.SqlClient.TSql+&lt;NonQueryStatementFormatIf&gt;d__1a,Paramol.SqlNonQueryCommand[])" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                            </results>
                          </test-suite>
                          <test-case name="Paramol.Tests.SqlClient.TSqlTests.NonQueryStatementFormatParameterCountLimitedTo2098" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-suite type="ParameterizedTest" name="NonQueryStatementFormatReturnsExpectedInstance" executed="True" result="Success" success="True" time="0.006" asserts="0">
                            <results>
                              <test-case name="Paramol.Tests.SqlClient.TSqlTests.NonQueryStatementFormatReturnsExpectedInstance(Paramol.SqlNonQueryCommand,Paramol.SqlNonQueryCommand)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="Paramol.Tests.SqlClient.TSqlTests.NonQueryStatementFormatReturnsExpectedInstance(Paramol.SqlNonQueryCommand,Paramol.SqlNonQueryCommand)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="Paramol.Tests.SqlClient.TSqlTests.NonQueryStatementFormatReturnsExpectedInstance(Paramol.SqlNonQueryCommand,Paramol.SqlNonQueryCommand)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="Paramol.Tests.SqlClient.TSqlTests.NonQueryStatementFormatReturnsExpectedInstance(Paramol.SqlNonQueryCommand,Paramol.SqlNonQueryCommand)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="Paramol.Tests.SqlClient.TSqlTests.NonQueryStatementFormatReturnsExpectedInstance(Paramol.SqlNonQueryCommand,Paramol.SqlNonQueryCommand)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="Paramol.Tests.SqlClient.TSqlTests.NonQueryStatementFormatReturnsExpectedInstance(Paramol.SqlNonQueryCommand,Paramol.SqlNonQueryCommand)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="Paramol.Tests.SqlClient.TSqlTests.NonQueryStatementFormatReturnsExpectedInstance(Paramol.SqlNonQueryCommand,Paramol.SqlNonQueryCommand)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                            </results>
                          </test-suite>
                          <test-case name="Paramol.Tests.SqlClient.TSqlTests.NonQueryStatementFormatUnlessParameterCountLimitedTo2098WhenConditionIsMet" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlTests.NonQueryStatementFormatUnlessParameterCountNotLimitedTo2098WhenConditionIsMet" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-suite type="ParameterizedTest" name="NonQueryStatementFormatUnlessReturnsExpectedInstance" executed="True" result="Success" success="True" time="0.011" asserts="0">
                            <results>
                              <test-case name="Paramol.Tests.SqlClient.TSqlTests.NonQueryStatementFormatUnlessReturnsExpectedInstance(Paramol.SqlClient.TSql+&lt;NonQueryStatementFormatUnless&gt;d__1d,Paramol.SqlNonQueryCommand[])" executed="True" result="Success" success="True" time="0.001" asserts="3" />
                              <test-case name="Paramol.Tests.SqlClient.TSqlTests.NonQueryStatementFormatUnlessReturnsExpectedInstance(Paramol.SqlClient.TSql+&lt;NonQueryStatementFormatUnless&gt;d__1d,Paramol.SqlNonQueryCommand[])" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                              <test-case name="Paramol.Tests.SqlClient.TSqlTests.NonQueryStatementFormatUnlessReturnsExpectedInstance(Paramol.SqlClient.TSql+&lt;NonQueryStatementFormatUnless&gt;d__1d,Paramol.SqlNonQueryCommand[])" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                              <test-case name="Paramol.Tests.SqlClient.TSqlTests.NonQueryStatementFormatUnlessReturnsExpectedInstance(Paramol.SqlClient.TSql+&lt;NonQueryStatementFormatUnless&gt;d__1d,Paramol.SqlNonQueryCommand[])" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                              <test-case name="Paramol.Tests.SqlClient.TSqlTests.NonQueryStatementFormatUnlessReturnsExpectedInstance(Paramol.SqlClient.TSql+&lt;NonQueryStatementFormatUnless&gt;d__1d,Paramol.SqlNonQueryCommand[])" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                              <test-case name="Paramol.Tests.SqlClient.TSqlTests.NonQueryStatementFormatUnlessReturnsExpectedInstance(Paramol.SqlClient.TSql+&lt;NonQueryStatementFormatUnless&gt;d__1d,Paramol.SqlNonQueryCommand[])" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                              <test-case name="Paramol.Tests.SqlClient.TSqlTests.NonQueryStatementFormatUnlessReturnsExpectedInstance(Paramol.SqlClient.TSql+&lt;NonQueryStatementFormatUnless&gt;d__1d,Paramol.SqlNonQueryCommand[])" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                              <test-case name="Paramol.Tests.SqlClient.TSqlTests.NonQueryStatementFormatUnlessReturnsExpectedInstance(Paramol.SqlClient.TSql+&lt;NonQueryStatementFormatUnless&gt;d__1d,Paramol.SqlNonQueryCommand[])" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Paramol.Tests.SqlClient.TSqlTests.NonQueryStatementFormatUnlessReturnsExpectedInstance(Paramol.SqlClient.TSql+&lt;NonQueryStatementFormatUnless&gt;d__1d,Paramol.SqlNonQueryCommand[])" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Paramol.Tests.SqlClient.TSqlTests.NonQueryStatementFormatUnlessReturnsExpectedInstance(Paramol.SqlClient.TSql+&lt;NonQueryStatementFormatUnless&gt;d__1d,Paramol.SqlNonQueryCommand[])" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Paramol.Tests.SqlClient.TSqlTests.NonQueryStatementFormatUnlessReturnsExpectedInstance(Paramol.SqlClient.TSql+&lt;NonQueryStatementFormatUnless&gt;d__1d,Paramol.SqlNonQueryCommand[])" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Paramol.Tests.SqlClient.TSqlTests.NonQueryStatementFormatUnlessReturnsExpectedInstance(Paramol.SqlClient.TSql+&lt;NonQueryStatementFormatUnless&gt;d__1d,Paramol.SqlNonQueryCommand[])" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Paramol.Tests.SqlClient.TSqlTests.NonQueryStatementFormatUnlessReturnsExpectedInstance(Paramol.SqlClient.TSql+&lt;NonQueryStatementFormatUnless&gt;d__1d,Paramol.SqlNonQueryCommand[])" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Paramol.Tests.SqlClient.TSqlTests.NonQueryStatementFormatUnlessReturnsExpectedInstance(Paramol.SqlClient.TSql+&lt;NonQueryStatementFormatUnless&gt;d__1d,Paramol.SqlNonQueryCommand[])" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                            </results>
                          </test-suite>
                          <test-case name="Paramol.Tests.SqlClient.TSqlTests.NonQueryStatementIfParameterCountLimitedTo2098WhenConditionIsMet" executed="True" result="Success" success="True" time="0.028" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlTests.NonQueryStatementIfParameterCountNotLimitedTo2098WhenConditionIsNotMet" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-suite type="ParameterizedTest" name="NonQueryStatementIfReturnsExpectedInstance" executed="True" result="Success" success="True" time="0.008" asserts="0">
                            <results>
                              <test-case name="Paramol.Tests.SqlClient.TSqlTests.NonQueryStatementIfReturnsExpectedInstance(Paramol.SqlClient.TSql+&lt;NonQueryStatementIf&gt;d__10,Paramol.SqlNonQueryCommand[])" executed="True" result="Success" success="True" time="0.001" asserts="3" />
                              <test-case name="Paramol.Tests.SqlClient.TSqlTests.NonQueryStatementIfReturnsExpectedInstance(Paramol.SqlClient.TSql+&lt;NonQueryStatementIf&gt;d__10,Paramol.SqlNonQueryCommand[])" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                              <test-case name="Paramol.Tests.SqlClient.TSqlTests.NonQueryStatementIfReturnsExpectedInstance(Paramol.SqlClient.TSql+&lt;NonQueryStatementIf&gt;d__10,Paramol.SqlNonQueryCommand[])" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                              <test-case name="Paramol.Tests.SqlClient.TSqlTests.NonQueryStatementIfReturnsExpectedInstance(Paramol.SqlClient.TSql+&lt;NonQueryStatementIf&gt;d__10,Paramol.SqlNonQueryCommand[])" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                              <test-case name="Paramol.Tests.SqlClient.TSqlTests.NonQueryStatementIfReturnsExpectedInstance(Paramol.SqlClient.TSql+&lt;NonQueryStatementIf&gt;d__10,Paramol.SqlNonQueryCommand[])" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                              <test-case name="Paramol.Tests.SqlClient.TSqlTests.NonQueryStatementIfReturnsExpectedInstance(Paramol.SqlClient.TSql+&lt;NonQueryStatementIf&gt;d__10,Paramol.SqlNonQueryCommand[])" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Paramol.Tests.SqlClient.TSqlTests.NonQueryStatementIfReturnsExpectedInstance(Paramol.SqlClient.TSql+&lt;NonQueryStatementIf&gt;d__10,Paramol.SqlNonQueryCommand[])" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Paramol.Tests.SqlClient.TSqlTests.NonQueryStatementIfReturnsExpectedInstance(Paramol.SqlClient.TSql+&lt;NonQueryStatementIf&gt;d__10,Paramol.SqlNonQueryCommand[])" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Paramol.Tests.SqlClient.TSqlTests.NonQueryStatementIfReturnsExpectedInstance(Paramol.SqlClient.TSql+&lt;NonQueryStatementIf&gt;d__10,Paramol.SqlNonQueryCommand[])" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Paramol.Tests.SqlClient.TSqlTests.NonQueryStatementIfReturnsExpectedInstance(Paramol.SqlClient.TSql+&lt;NonQueryStatementIf&gt;d__10,Paramol.SqlNonQueryCommand[])" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                            </results>
                          </test-suite>
                          <test-case name="Paramol.Tests.SqlClient.TSqlTests.NonQueryStatementParameterCountLimitedTo2098" executed="True" result="Success" success="True" time="0.005" asserts="1" />
                          <test-suite type="ParameterizedTest" name="NonQueryStatementReturnsExpectedInstance" executed="True" result="Success" success="True" time="0.004" asserts="0">
                            <results>
                              <test-case name="Paramol.Tests.SqlClient.TSqlTests.NonQueryStatementReturnsExpectedInstance(Paramol.SqlNonQueryCommand,Paramol.SqlNonQueryCommand)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="Paramol.Tests.SqlClient.TSqlTests.NonQueryStatementReturnsExpectedInstance(Paramol.SqlNonQueryCommand,Paramol.SqlNonQueryCommand)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="Paramol.Tests.SqlClient.TSqlTests.NonQueryStatementReturnsExpectedInstance(Paramol.SqlNonQueryCommand,Paramol.SqlNonQueryCommand)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="Paramol.Tests.SqlClient.TSqlTests.NonQueryStatementReturnsExpectedInstance(Paramol.SqlNonQueryCommand,Paramol.SqlNonQueryCommand)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="Paramol.Tests.SqlClient.TSqlTests.NonQueryStatementReturnsExpectedInstance(Paramol.SqlNonQueryCommand,Paramol.SqlNonQueryCommand)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                            </results>
                          </test-suite>
                          <test-case name="Paramol.Tests.SqlClient.TSqlTests.NonQueryStatementUnlessParameterCountLimitedTo2098WhenConditionIsMet" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlTests.NonQueryStatementUnlessParameterCountNotLimitedTo2098WhenConditionIsMet" executed="True" result="Success" success="True" time="0.002" asserts="1" />
                          <test-suite type="ParameterizedTest" name="NonQueryStatementUnlessReturnsExpectedInstance" executed="True" result="Success" success="True" time="0.008" asserts="0">
                            <results>
                              <test-case name="Paramol.Tests.SqlClient.TSqlTests.NonQueryStatementUnlessReturnsExpectedInstance(Paramol.SqlClient.TSql+&lt;NonQueryStatementUnless&gt;d__13,Paramol.SqlNonQueryCommand[])" executed="True" result="Success" success="True" time="0.001" asserts="3" />
                              <test-case name="Paramol.Tests.SqlClient.TSqlTests.NonQueryStatementUnlessReturnsExpectedInstance(Paramol.SqlClient.TSql+&lt;NonQueryStatementUnless&gt;d__13,Paramol.SqlNonQueryCommand[])" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                              <test-case name="Paramol.Tests.SqlClient.TSqlTests.NonQueryStatementUnlessReturnsExpectedInstance(Paramol.SqlClient.TSql+&lt;NonQueryStatementUnless&gt;d__13,Paramol.SqlNonQueryCommand[])" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                              <test-case name="Paramol.Tests.SqlClient.TSqlTests.NonQueryStatementUnlessReturnsExpectedInstance(Paramol.SqlClient.TSql+&lt;NonQueryStatementUnless&gt;d__13,Paramol.SqlNonQueryCommand[])" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                              <test-case name="Paramol.Tests.SqlClient.TSqlTests.NonQueryStatementUnlessReturnsExpectedInstance(Paramol.SqlClient.TSql+&lt;NonQueryStatementUnless&gt;d__13,Paramol.SqlNonQueryCommand[])" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                              <test-case name="Paramol.Tests.SqlClient.TSqlTests.NonQueryStatementUnlessReturnsExpectedInstance(Paramol.SqlClient.TSql+&lt;NonQueryStatementUnless&gt;d__13,Paramol.SqlNonQueryCommand[])" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Paramol.Tests.SqlClient.TSqlTests.NonQueryStatementUnlessReturnsExpectedInstance(Paramol.SqlClient.TSql+&lt;NonQueryStatementUnless&gt;d__13,Paramol.SqlNonQueryCommand[])" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Paramol.Tests.SqlClient.TSqlTests.NonQueryStatementUnlessReturnsExpectedInstance(Paramol.SqlClient.TSql+&lt;NonQueryStatementUnless&gt;d__13,Paramol.SqlNonQueryCommand[])" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Paramol.Tests.SqlClient.TSqlTests.NonQueryStatementUnlessReturnsExpectedInstance(Paramol.SqlClient.TSql+&lt;NonQueryStatementUnless&gt;d__13,Paramol.SqlNonQueryCommand[])" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Paramol.Tests.SqlClient.TSqlTests.NonQueryStatementUnlessReturnsExpectedInstance(Paramol.SqlClient.TSql+&lt;NonQueryStatementUnless&gt;d__13,Paramol.SqlNonQueryCommand[])" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                            </results>
                          </test-suite>
                          <test-case name="Paramol.Tests.SqlClient.TSqlTests.NVarCharMaxNullReturnsExpectedInstance" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlTests.NVarCharMaxReturnsExpectedInstance" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlTests.NVarCharNullReturnsExpectedInstance" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlTests.NVarCharReturnsExpectedInstance" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlTests.QueryFormatIfParameterCountLimitedTo2098WhenConditionIsMet" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlTests.QueryFormatIfParameterCountNotLimitedTo2098WhenConditionIsNotMet" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlTests.QueryFormatParameterCountLimitedTo2098" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlTests.QueryFormatUnlessParameterCountLimitedTo2098WhenConditionIsMet" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlTests.QueryFormatUnlessParameterCountNotLimitedTo2098WhenConditionIsMet" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlTests.QueryIfParameterCountLimitedTo2098WhenConditionIsMet" executed="True" result="Success" success="True" time="0.002" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlTests.QueryIfParameterCountNotLimitedTo2098WhenConditionIsNotMet" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlTests.QueryParameterCountLimitedTo2098" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-suite type="ParameterizedTest" name="QueryProcedureFormatIfReturnsExpectedInstance" executed="True" result="Success" success="True" time="0.013" asserts="0">
                            <results>
                              <test-case name="Paramol.Tests.SqlClient.TSqlTests.QueryProcedureFormatIfReturnsExpectedInstance(Paramol.SqlClient.TSql+&lt;QueryProcedureFormatIf&gt;d__2a,Paramol.SqlQueryCommand[])" executed="True" result="Success" success="True" time="0.001" asserts="3" />
                              <test-case name="Paramol.Tests.SqlClient.TSqlTests.QueryProcedureFormatIfReturnsExpectedInstance(Paramol.SqlClient.TSql+&lt;QueryProcedureFormatIf&gt;d__2a,Paramol.SqlQueryCommand[])" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                              <test-case name="Paramol.Tests.SqlClient.TSqlTests.QueryProcedureFormatIfReturnsExpectedInstance(Paramol.SqlClient.TSql+&lt;QueryProcedureFormatIf&gt;d__2a,Paramol.SqlQueryCommand[])" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                              <test-case name="Paramol.Tests.SqlClient.TSqlTests.QueryProcedureFormatIfReturnsExpectedInstance(Paramol.SqlClient.TSql+&lt;QueryProcedureFormatIf&gt;d__2a,Paramol.SqlQueryCommand[])" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                              <test-case name="Paramol.Tests.SqlClient.TSqlTests.QueryProcedureFormatIfReturnsExpectedInstance(Paramol.SqlClient.TSql+&lt;QueryProcedureFormatIf&gt;d__2a,Paramol.SqlQueryCommand[])" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                              <test-case name="Paramol.Tests.SqlClient.TSqlTests.QueryProcedureFormatIfReturnsExpectedInstance(Paramol.SqlClient.TSql+&lt;QueryProcedureFormatIf&gt;d__2a,Paramol.SqlQueryCommand[])" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                              <test-case name="Paramol.Tests.SqlClient.TSqlTests.QueryProcedureFormatIfReturnsExpectedInstance(Paramol.SqlClient.TSql+&lt;QueryProcedureFormatIf&gt;d__2a,Paramol.SqlQueryCommand[])" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                              <test-case name="Paramol.Tests.SqlClient.TSqlTests.QueryProcedureFormatIfReturnsExpectedInstance(Paramol.SqlClient.TSql+&lt;QueryProcedureFormatIf&gt;d__2a,Paramol.SqlQueryCommand[])" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Paramol.Tests.SqlClient.TSqlTests.QueryProcedureFormatIfReturnsExpectedInstance(Paramol.SqlClient.TSql+&lt;QueryProcedureFormatIf&gt;d__2a,Paramol.SqlQueryCommand[])" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Paramol.Tests.SqlClient.TSqlTests.QueryProcedureFormatIfReturnsExpectedInstance(Paramol.SqlClient.TSql+&lt;QueryProcedureFormatIf&gt;d__2a,Paramol.SqlQueryCommand[])" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Paramol.Tests.SqlClient.TSqlTests.QueryProcedureFormatIfReturnsExpectedInstance(Paramol.SqlClient.TSql+&lt;QueryProcedureFormatIf&gt;d__2a,Paramol.SqlQueryCommand[])" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Paramol.Tests.SqlClient.TSqlTests.QueryProcedureFormatIfReturnsExpectedInstance(Paramol.SqlClient.TSql+&lt;QueryProcedureFormatIf&gt;d__2a,Paramol.SqlQueryCommand[])" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Paramol.Tests.SqlClient.TSqlTests.QueryProcedureFormatIfReturnsExpectedInstance(Paramol.SqlClient.TSql+&lt;QueryProcedureFormatIf&gt;d__2a,Paramol.SqlQueryCommand[])" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Paramol.Tests.SqlClient.TSqlTests.QueryProcedureFormatIfReturnsExpectedInstance(Paramol.SqlClient.TSql+&lt;QueryProcedureFormatIf&gt;d__2a,Paramol.SqlQueryCommand[])" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                            </results>
                          </test-suite>
                          <test-suite type="ParameterizedTest" name="QueryProcedureFormatReturnsExpectedInstance" executed="True" result="Success" success="True" time="0.005" asserts="0">
                            <results>
                              <test-case name="Paramol.Tests.SqlClient.TSqlTests.QueryProcedureFormatReturnsExpectedInstance(Paramol.SqlQueryCommand,Paramol.SqlQueryCommand)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="Paramol.Tests.SqlClient.TSqlTests.QueryProcedureFormatReturnsExpectedInstance(Paramol.SqlQueryCommand,Paramol.SqlQueryCommand)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="Paramol.Tests.SqlClient.TSqlTests.QueryProcedureFormatReturnsExpectedInstance(Paramol.SqlQueryCommand,Paramol.SqlQueryCommand)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="Paramol.Tests.SqlClient.TSqlTests.QueryProcedureFormatReturnsExpectedInstance(Paramol.SqlQueryCommand,Paramol.SqlQueryCommand)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="Paramol.Tests.SqlClient.TSqlTests.QueryProcedureFormatReturnsExpectedInstance(Paramol.SqlQueryCommand,Paramol.SqlQueryCommand)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="Paramol.Tests.SqlClient.TSqlTests.QueryProcedureFormatReturnsExpectedInstance(Paramol.SqlQueryCommand,Paramol.SqlQueryCommand)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="Paramol.Tests.SqlClient.TSqlTests.QueryProcedureFormatReturnsExpectedInstance(Paramol.SqlQueryCommand,Paramol.SqlQueryCommand)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                            </results>
                          </test-suite>
                          <test-suite type="ParameterizedTest" name="QueryProcedureFormatUnlessReturnsExpectedInstance" executed="True" result="Success" success="True" time="0.012" asserts="0">
                            <results>
                              <test-case name="Paramol.Tests.SqlClient.TSqlTests.QueryProcedureFormatUnlessReturnsExpectedInstance(Paramol.SqlClient.TSql+&lt;QueryProcedureFormatUnless&gt;d__2d,Paramol.SqlQueryCommand[])" executed="True" result="Success" success="True" time="0.001" asserts="3" />
                              <test-case name="Paramol.Tests.SqlClient.TSqlTests.QueryProcedureFormatUnlessReturnsExpectedInstance(Paramol.SqlClient.TSql+&lt;QueryProcedureFormatUnless&gt;d__2d,Paramol.SqlQueryCommand[])" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                              <test-case name="Paramol.Tests.SqlClient.TSqlTests.QueryProcedureFormatUnlessReturnsExpectedInstance(Paramol.SqlClient.TSql+&lt;QueryProcedureFormatUnless&gt;d__2d,Paramol.SqlQueryCommand[])" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                              <test-case name="Paramol.Tests.SqlClient.TSqlTests.QueryProcedureFormatUnlessReturnsExpectedInstance(Paramol.SqlClient.TSql+&lt;QueryProcedureFormatUnless&gt;d__2d,Paramol.SqlQueryCommand[])" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                              <test-case name="Paramol.Tests.SqlClient.TSqlTests.QueryProcedureFormatUnlessReturnsExpectedInstance(Paramol.SqlClient.TSql+&lt;QueryProcedureFormatUnless&gt;d__2d,Paramol.SqlQueryCommand[])" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                              <test-case name="Paramol.Tests.SqlClient.TSqlTests.QueryProcedureFormatUnlessReturnsExpectedInstance(Paramol.SqlClient.TSql+&lt;QueryProcedureFormatUnless&gt;d__2d,Paramol.SqlQueryCommand[])" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                              <test-case name="Paramol.Tests.SqlClient.TSqlTests.QueryProcedureFormatUnlessReturnsExpectedInstance(Paramol.SqlClient.TSql+&lt;QueryProcedureFormatUnless&gt;d__2d,Paramol.SqlQueryCommand[])" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                              <test-case name="Paramol.Tests.SqlClient.TSqlTests.QueryProcedureFormatUnlessReturnsExpectedInstance(Paramol.SqlClient.TSql+&lt;QueryProcedureFormatUnless&gt;d__2d,Paramol.SqlQueryCommand[])" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Paramol.Tests.SqlClient.TSqlTests.QueryProcedureFormatUnlessReturnsExpectedInstance(Paramol.SqlClient.TSql+&lt;QueryProcedureFormatUnless&gt;d__2d,Paramol.SqlQueryCommand[])" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Paramol.Tests.SqlClient.TSqlTests.QueryProcedureFormatUnlessReturnsExpectedInstance(Paramol.SqlClient.TSql+&lt;QueryProcedureFormatUnless&gt;d__2d,Paramol.SqlQueryCommand[])" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Paramol.Tests.SqlClient.TSqlTests.QueryProcedureFormatUnlessReturnsExpectedInstance(Paramol.SqlClient.TSql+&lt;QueryProcedureFormatUnless&gt;d__2d,Paramol.SqlQueryCommand[])" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Paramol.Tests.SqlClient.TSqlTests.QueryProcedureFormatUnlessReturnsExpectedInstance(Paramol.SqlClient.TSql+&lt;QueryProcedureFormatUnless&gt;d__2d,Paramol.SqlQueryCommand[])" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Paramol.Tests.SqlClient.TSqlTests.QueryProcedureFormatUnlessReturnsExpectedInstance(Paramol.SqlClient.TSql+&lt;QueryProcedureFormatUnless&gt;d__2d,Paramol.SqlQueryCommand[])" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Paramol.Tests.SqlClient.TSqlTests.QueryProcedureFormatUnlessReturnsExpectedInstance(Paramol.SqlClient.TSql+&lt;QueryProcedureFormatUnless&gt;d__2d,Paramol.SqlQueryCommand[])" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                            </results>
                          </test-suite>
                          <test-suite type="ParameterizedTest" name="QueryProcedureIfReturnsExpectedInstance" executed="True" result="Success" success="True" time="0.009" asserts="0">
                            <results>
                              <test-case name="Paramol.Tests.SqlClient.TSqlTests.QueryProcedureIfReturnsExpectedInstance(Paramol.SqlClient.TSql+&lt;QueryProcedureIf&gt;d__20,Paramol.SqlQueryCommand[])" executed="True" result="Success" success="True" time="0.001" asserts="3" />
                              <test-case name="Paramol.Tests.SqlClient.TSqlTests.QueryProcedureIfReturnsExpectedInstance(Paramol.SqlClient.TSql+&lt;QueryProcedureIf&gt;d__20,Paramol.SqlQueryCommand[])" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                              <test-case name="Paramol.Tests.SqlClient.TSqlTests.QueryProcedureIfReturnsExpectedInstance(Paramol.SqlClient.TSql+&lt;QueryProcedureIf&gt;d__20,Paramol.SqlQueryCommand[])" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                              <test-case name="Paramol.Tests.SqlClient.TSqlTests.QueryProcedureIfReturnsExpectedInstance(Paramol.SqlClient.TSql+&lt;QueryProcedureIf&gt;d__20,Paramol.SqlQueryCommand[])" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                              <test-case name="Paramol.Tests.SqlClient.TSqlTests.QueryProcedureIfReturnsExpectedInstance(Paramol.SqlClient.TSql+&lt;QueryProcedureIf&gt;d__20,Paramol.SqlQueryCommand[])" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                              <test-case name="Paramol.Tests.SqlClient.TSqlTests.QueryProcedureIfReturnsExpectedInstance(Paramol.SqlClient.TSql+&lt;QueryProcedureIf&gt;d__20,Paramol.SqlQueryCommand[])" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Paramol.Tests.SqlClient.TSqlTests.QueryProcedureIfReturnsExpectedInstance(Paramol.SqlClient.TSql+&lt;QueryProcedureIf&gt;d__20,Paramol.SqlQueryCommand[])" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Paramol.Tests.SqlClient.TSqlTests.QueryProcedureIfReturnsExpectedInstance(Paramol.SqlClient.TSql+&lt;QueryProcedureIf&gt;d__20,Paramol.SqlQueryCommand[])" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Paramol.Tests.SqlClient.TSqlTests.QueryProcedureIfReturnsExpectedInstance(Paramol.SqlClient.TSql+&lt;QueryProcedureIf&gt;d__20,Paramol.SqlQueryCommand[])" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Paramol.Tests.SqlClient.TSqlTests.QueryProcedureIfReturnsExpectedInstance(Paramol.SqlClient.TSql+&lt;QueryProcedureIf&gt;d__20,Paramol.SqlQueryCommand[])" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                            </results>
                          </test-suite>
                          <test-suite type="ParameterizedTest" name="QueryProcedureReturnsExpectedInstance" executed="True" result="Success" success="True" time="0.004" asserts="0">
                            <results>
                              <test-case name="Paramol.Tests.SqlClient.TSqlTests.QueryProcedureReturnsExpectedInstance(Paramol.SqlQueryCommand,Paramol.SqlQueryCommand)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="Paramol.Tests.SqlClient.TSqlTests.QueryProcedureReturnsExpectedInstance(Paramol.SqlQueryCommand,Paramol.SqlQueryCommand)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="Paramol.Tests.SqlClient.TSqlTests.QueryProcedureReturnsExpectedInstance(Paramol.SqlQueryCommand,Paramol.SqlQueryCommand)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="Paramol.Tests.SqlClient.TSqlTests.QueryProcedureReturnsExpectedInstance(Paramol.SqlQueryCommand,Paramol.SqlQueryCommand)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="Paramol.Tests.SqlClient.TSqlTests.QueryProcedureReturnsExpectedInstance(Paramol.SqlQueryCommand,Paramol.SqlQueryCommand)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                            </results>
                          </test-suite>
                          <test-suite type="ParameterizedTest" name="QueryProcedureUnlessReturnsExpectedInstance" executed="True" result="Success" success="True" time="0.009" asserts="0">
                            <results>
                              <test-case name="Paramol.Tests.SqlClient.TSqlTests.QueryProcedureUnlessReturnsExpectedInstance(Paramol.SqlClient.TSql+&lt;QueryProcedureUnless&gt;d__23,Paramol.SqlQueryCommand[])" executed="True" result="Success" success="True" time="0.001" asserts="3" />
                              <test-case name="Paramol.Tests.SqlClient.TSqlTests.QueryProcedureUnlessReturnsExpectedInstance(Paramol.SqlClient.TSql+&lt;QueryProcedureUnless&gt;d__23,Paramol.SqlQueryCommand[])" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                              <test-case name="Paramol.Tests.SqlClient.TSqlTests.QueryProcedureUnlessReturnsExpectedInstance(Paramol.SqlClient.TSql+&lt;QueryProcedureUnless&gt;d__23,Paramol.SqlQueryCommand[])" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                              <test-case name="Paramol.Tests.SqlClient.TSqlTests.QueryProcedureUnlessReturnsExpectedInstance(Paramol.SqlClient.TSql+&lt;QueryProcedureUnless&gt;d__23,Paramol.SqlQueryCommand[])" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                              <test-case name="Paramol.Tests.SqlClient.TSqlTests.QueryProcedureUnlessReturnsExpectedInstance(Paramol.SqlClient.TSql+&lt;QueryProcedureUnless&gt;d__23,Paramol.SqlQueryCommand[])" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                              <test-case name="Paramol.Tests.SqlClient.TSqlTests.QueryProcedureUnlessReturnsExpectedInstance(Paramol.SqlClient.TSql+&lt;QueryProcedureUnless&gt;d__23,Paramol.SqlQueryCommand[])" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Paramol.Tests.SqlClient.TSqlTests.QueryProcedureUnlessReturnsExpectedInstance(Paramol.SqlClient.TSql+&lt;QueryProcedureUnless&gt;d__23,Paramol.SqlQueryCommand[])" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Paramol.Tests.SqlClient.TSqlTests.QueryProcedureUnlessReturnsExpectedInstance(Paramol.SqlClient.TSql+&lt;QueryProcedureUnless&gt;d__23,Paramol.SqlQueryCommand[])" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Paramol.Tests.SqlClient.TSqlTests.QueryProcedureUnlessReturnsExpectedInstance(Paramol.SqlClient.TSql+&lt;QueryProcedureUnless&gt;d__23,Paramol.SqlQueryCommand[])" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Paramol.Tests.SqlClient.TSqlTests.QueryProcedureUnlessReturnsExpectedInstance(Paramol.SqlClient.TSql+&lt;QueryProcedureUnless&gt;d__23,Paramol.SqlQueryCommand[])" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                            </results>
                          </test-suite>
                          <test-suite type="ParameterizedTest" name="QueryStatementFormatIfReturnsExpectedInstance" executed="True" result="Success" success="True" time="0.011" asserts="0">
                            <results>
                              <test-case name="Paramol.Tests.SqlClient.TSqlTests.QueryStatementFormatIfReturnsExpectedInstance(Paramol.SqlClient.TSql+&lt;QueryStatementFormatIf&gt;d__3a,Paramol.SqlQueryCommand[])" executed="True" result="Success" success="True" time="0.001" asserts="3" />
                              <test-case name="Paramol.Tests.SqlClient.TSqlTests.QueryStatementFormatIfReturnsExpectedInstance(Paramol.SqlClient.TSql+&lt;QueryStatementFormatIf&gt;d__3a,Paramol.SqlQueryCommand[])" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                              <test-case name="Paramol.Tests.SqlClient.TSqlTests.QueryStatementFormatIfReturnsExpectedInstance(Paramol.SqlClient.TSql+&lt;QueryStatementFormatIf&gt;d__3a,Paramol.SqlQueryCommand[])" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                              <test-case name="Paramol.Tests.SqlClient.TSqlTests.QueryStatementFormatIfReturnsExpectedInstance(Paramol.SqlClient.TSql+&lt;QueryStatementFormatIf&gt;d__3a,Paramol.SqlQueryCommand[])" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                              <test-case name="Paramol.Tests.SqlClient.TSqlTests.QueryStatementFormatIfReturnsExpectedInstance(Paramol.SqlClient.TSql+&lt;QueryStatementFormatIf&gt;d__3a,Paramol.SqlQueryCommand[])" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                              <test-case name="Paramol.Tests.SqlClient.TSqlTests.QueryStatementFormatIfReturnsExpectedInstance(Paramol.SqlClient.TSql+&lt;QueryStatementFormatIf&gt;d__3a,Paramol.SqlQueryCommand[])" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                              <test-case name="Paramol.Tests.SqlClient.TSqlTests.QueryStatementFormatIfReturnsExpectedInstance(Paramol.SqlClient.TSql+&lt;QueryStatementFormatIf&gt;d__3a,Paramol.SqlQueryCommand[])" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                              <test-case name="Paramol.Tests.SqlClient.TSqlTests.QueryStatementFormatIfReturnsExpectedInstance(Paramol.SqlClient.TSql+&lt;QueryStatementFormatIf&gt;d__3a,Paramol.SqlQueryCommand[])" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Paramol.Tests.SqlClient.TSqlTests.QueryStatementFormatIfReturnsExpectedInstance(Paramol.SqlClient.TSql+&lt;QueryStatementFormatIf&gt;d__3a,Paramol.SqlQueryCommand[])" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Paramol.Tests.SqlClient.TSqlTests.QueryStatementFormatIfReturnsExpectedInstance(Paramol.SqlClient.TSql+&lt;QueryStatementFormatIf&gt;d__3a,Paramol.SqlQueryCommand[])" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Paramol.Tests.SqlClient.TSqlTests.QueryStatementFormatIfReturnsExpectedInstance(Paramol.SqlClient.TSql+&lt;QueryStatementFormatIf&gt;d__3a,Paramol.SqlQueryCommand[])" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Paramol.Tests.SqlClient.TSqlTests.QueryStatementFormatIfReturnsExpectedInstance(Paramol.SqlClient.TSql+&lt;QueryStatementFormatIf&gt;d__3a,Paramol.SqlQueryCommand[])" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Paramol.Tests.SqlClient.TSqlTests.QueryStatementFormatIfReturnsExpectedInstance(Paramol.SqlClient.TSql+&lt;QueryStatementFormatIf&gt;d__3a,Paramol.SqlQueryCommand[])" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Paramol.Tests.SqlClient.TSqlTests.QueryStatementFormatIfReturnsExpectedInstance(Paramol.SqlClient.TSql+&lt;QueryStatementFormatIf&gt;d__3a,Paramol.SqlQueryCommand[])" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                            </results>
                          </test-suite>
                          <test-suite type="ParameterizedTest" name="QueryStatementFormatReturnsExpectedInstance" executed="True" result="Success" success="True" time="0.005" asserts="0">
                            <results>
                              <test-case name="Paramol.Tests.SqlClient.TSqlTests.QueryStatementFormatReturnsExpectedInstance(Paramol.SqlQueryCommand,Paramol.SqlQueryCommand)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="Paramol.Tests.SqlClient.TSqlTests.QueryStatementFormatReturnsExpectedInstance(Paramol.SqlQueryCommand,Paramol.SqlQueryCommand)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="Paramol.Tests.SqlClient.TSqlTests.QueryStatementFormatReturnsExpectedInstance(Paramol.SqlQueryCommand,Paramol.SqlQueryCommand)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="Paramol.Tests.SqlClient.TSqlTests.QueryStatementFormatReturnsExpectedInstance(Paramol.SqlQueryCommand,Paramol.SqlQueryCommand)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="Paramol.Tests.SqlClient.TSqlTests.QueryStatementFormatReturnsExpectedInstance(Paramol.SqlQueryCommand,Paramol.SqlQueryCommand)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="Paramol.Tests.SqlClient.TSqlTests.QueryStatementFormatReturnsExpectedInstance(Paramol.SqlQueryCommand,Paramol.SqlQueryCommand)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="Paramol.Tests.SqlClient.TSqlTests.QueryStatementFormatReturnsExpectedInstance(Paramol.SqlQueryCommand,Paramol.SqlQueryCommand)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                            </results>
                          </test-suite>
                          <test-suite type="ParameterizedTest" name="QueryStatementFormatUnlessReturnsExpectedInstance" executed="True" result="Success" success="True" time="0.011" asserts="0">
                            <results>
                              <test-case name="Paramol.Tests.SqlClient.TSqlTests.QueryStatementFormatUnlessReturnsExpectedInstance(Paramol.SqlClient.TSql+&lt;QueryStatementFormatUnless&gt;d__3d,Paramol.SqlQueryCommand[])" executed="True" result="Success" success="True" time="0.001" asserts="3" />
                              <test-case name="Paramol.Tests.SqlClient.TSqlTests.QueryStatementFormatUnlessReturnsExpectedInstance(Paramol.SqlClient.TSql+&lt;QueryStatementFormatUnless&gt;d__3d,Paramol.SqlQueryCommand[])" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                              <test-case name="Paramol.Tests.SqlClient.TSqlTests.QueryStatementFormatUnlessReturnsExpectedInstance(Paramol.SqlClient.TSql+&lt;QueryStatementFormatUnless&gt;d__3d,Paramol.SqlQueryCommand[])" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                              <test-case name="Paramol.Tests.SqlClient.TSqlTests.QueryStatementFormatUnlessReturnsExpectedInstance(Paramol.SqlClient.TSql+&lt;QueryStatementFormatUnless&gt;d__3d,Paramol.SqlQueryCommand[])" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                              <test-case name="Paramol.Tests.SqlClient.TSqlTests.QueryStatementFormatUnlessReturnsExpectedInstance(Paramol.SqlClient.TSql+&lt;QueryStatementFormatUnless&gt;d__3d,Paramol.SqlQueryCommand[])" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                              <test-case name="Paramol.Tests.SqlClient.TSqlTests.QueryStatementFormatUnlessReturnsExpectedInstance(Paramol.SqlClient.TSql+&lt;QueryStatementFormatUnless&gt;d__3d,Paramol.SqlQueryCommand[])" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                              <test-case name="Paramol.Tests.SqlClient.TSqlTests.QueryStatementFormatUnlessReturnsExpectedInstance(Paramol.SqlClient.TSql+&lt;QueryStatementFormatUnless&gt;d__3d,Paramol.SqlQueryCommand[])" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                              <test-case name="Paramol.Tests.SqlClient.TSqlTests.QueryStatementFormatUnlessReturnsExpectedInstance(Paramol.SqlClient.TSql+&lt;QueryStatementFormatUnless&gt;d__3d,Paramol.SqlQueryCommand[])" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Paramol.Tests.SqlClient.TSqlTests.QueryStatementFormatUnlessReturnsExpectedInstance(Paramol.SqlClient.TSql+&lt;QueryStatementFormatUnless&gt;d__3d,Paramol.SqlQueryCommand[])" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Paramol.Tests.SqlClient.TSqlTests.QueryStatementFormatUnlessReturnsExpectedInstance(Paramol.SqlClient.TSql+&lt;QueryStatementFormatUnless&gt;d__3d,Paramol.SqlQueryCommand[])" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Paramol.Tests.SqlClient.TSqlTests.QueryStatementFormatUnlessReturnsExpectedInstance(Paramol.SqlClient.TSql+&lt;QueryStatementFormatUnless&gt;d__3d,Paramol.SqlQueryCommand[])" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Paramol.Tests.SqlClient.TSqlTests.QueryStatementFormatUnlessReturnsExpectedInstance(Paramol.SqlClient.TSql+&lt;QueryStatementFormatUnless&gt;d__3d,Paramol.SqlQueryCommand[])" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Paramol.Tests.SqlClient.TSqlTests.QueryStatementFormatUnlessReturnsExpectedInstance(Paramol.SqlClient.TSql+&lt;QueryStatementFormatUnless&gt;d__3d,Paramol.SqlQueryCommand[])" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Paramol.Tests.SqlClient.TSqlTests.QueryStatementFormatUnlessReturnsExpectedInstance(Paramol.SqlClient.TSql+&lt;QueryStatementFormatUnless&gt;d__3d,Paramol.SqlQueryCommand[])" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                            </results>
                          </test-suite>
                          <test-suite type="ParameterizedTest" name="QueryStatementIfReturnsExpectedInstance" executed="True" result="Success" success="True" time="0.008" asserts="0">
                            <results>
                              <test-case name="Paramol.Tests.SqlClient.TSqlTests.QueryStatementIfReturnsExpectedInstance(Paramol.SqlClient.TSql+&lt;QueryStatementIf&gt;d__30,Paramol.SqlQueryCommand[])" executed="True" result="Success" success="True" time="0.001" asserts="3" />
                              <test-case name="Paramol.Tests.SqlClient.TSqlTests.QueryStatementIfReturnsExpectedInstance(Paramol.SqlClient.TSql+&lt;QueryStatementIf&gt;d__30,Paramol.SqlQueryCommand[])" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                              <test-case name="Paramol.Tests.SqlClient.TSqlTests.QueryStatementIfReturnsExpectedInstance(Paramol.SqlClient.TSql+&lt;QueryStatementIf&gt;d__30,Paramol.SqlQueryCommand[])" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                              <test-case name="Paramol.Tests.SqlClient.TSqlTests.QueryStatementIfReturnsExpectedInstance(Paramol.SqlClient.TSql+&lt;QueryStatementIf&gt;d__30,Paramol.SqlQueryCommand[])" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                              <test-case name="Paramol.Tests.SqlClient.TSqlTests.QueryStatementIfReturnsExpectedInstance(Paramol.SqlClient.TSql+&lt;QueryStatementIf&gt;d__30,Paramol.SqlQueryCommand[])" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                              <test-case name="Paramol.Tests.SqlClient.TSqlTests.QueryStatementIfReturnsExpectedInstance(Paramol.SqlClient.TSql+&lt;QueryStatementIf&gt;d__30,Paramol.SqlQueryCommand[])" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Paramol.Tests.SqlClient.TSqlTests.QueryStatementIfReturnsExpectedInstance(Paramol.SqlClient.TSql+&lt;QueryStatementIf&gt;d__30,Paramol.SqlQueryCommand[])" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Paramol.Tests.SqlClient.TSqlTests.QueryStatementIfReturnsExpectedInstance(Paramol.SqlClient.TSql+&lt;QueryStatementIf&gt;d__30,Paramol.SqlQueryCommand[])" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Paramol.Tests.SqlClient.TSqlTests.QueryStatementIfReturnsExpectedInstance(Paramol.SqlClient.TSql+&lt;QueryStatementIf&gt;d__30,Paramol.SqlQueryCommand[])" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Paramol.Tests.SqlClient.TSqlTests.QueryStatementIfReturnsExpectedInstance(Paramol.SqlClient.TSql+&lt;QueryStatementIf&gt;d__30,Paramol.SqlQueryCommand[])" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                            </results>
                          </test-suite>
                          <test-suite type="ParameterizedTest" name="QueryStatementReturnsExpectedInstance" executed="True" result="Success" success="True" time="0.004" asserts="0">
                            <results>
                              <test-case name="Paramol.Tests.SqlClient.TSqlTests.QueryStatementReturnsExpectedInstance(Paramol.SqlQueryCommand,Paramol.SqlQueryCommand)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="Paramol.Tests.SqlClient.TSqlTests.QueryStatementReturnsExpectedInstance(Paramol.SqlQueryCommand,Paramol.SqlQueryCommand)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="Paramol.Tests.SqlClient.TSqlTests.QueryStatementReturnsExpectedInstance(Paramol.SqlQueryCommand,Paramol.SqlQueryCommand)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="Paramol.Tests.SqlClient.TSqlTests.QueryStatementReturnsExpectedInstance(Paramol.SqlQueryCommand,Paramol.SqlQueryCommand)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="Paramol.Tests.SqlClient.TSqlTests.QueryStatementReturnsExpectedInstance(Paramol.SqlQueryCommand,Paramol.SqlQueryCommand)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                            </results>
                          </test-suite>
                          <test-suite type="ParameterizedTest" name="QueryStatementUnlessReturnsExpectedInstance" executed="True" result="Success" success="True" time="0.009" asserts="0">
                            <results>
                              <test-case name="Paramol.Tests.SqlClient.TSqlTests.QueryStatementUnlessReturnsExpectedInstance(Paramol.SqlClient.TSql+&lt;QueryStatementUnless&gt;d__33,Paramol.SqlQueryCommand[])" executed="True" result="Success" success="True" time="0.001" asserts="3" />
                              <test-case name="Paramol.Tests.SqlClient.TSqlTests.QueryStatementUnlessReturnsExpectedInstance(Paramol.SqlClient.TSql+&lt;QueryStatementUnless&gt;d__33,Paramol.SqlQueryCommand[])" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                              <test-case name="Paramol.Tests.SqlClient.TSqlTests.QueryStatementUnlessReturnsExpectedInstance(Paramol.SqlClient.TSql+&lt;QueryStatementUnless&gt;d__33,Paramol.SqlQueryCommand[])" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                              <test-case name="Paramol.Tests.SqlClient.TSqlTests.QueryStatementUnlessReturnsExpectedInstance(Paramol.SqlClient.TSql+&lt;QueryStatementUnless&gt;d__33,Paramol.SqlQueryCommand[])" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                              <test-case name="Paramol.Tests.SqlClient.TSqlTests.QueryStatementUnlessReturnsExpectedInstance(Paramol.SqlClient.TSql+&lt;QueryStatementUnless&gt;d__33,Paramol.SqlQueryCommand[])" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                              <test-case name="Paramol.Tests.SqlClient.TSqlTests.QueryStatementUnlessReturnsExpectedInstance(Paramol.SqlClient.TSql+&lt;QueryStatementUnless&gt;d__33,Paramol.SqlQueryCommand[])" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Paramol.Tests.SqlClient.TSqlTests.QueryStatementUnlessReturnsExpectedInstance(Paramol.SqlClient.TSql+&lt;QueryStatementUnless&gt;d__33,Paramol.SqlQueryCommand[])" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Paramol.Tests.SqlClient.TSqlTests.QueryStatementUnlessReturnsExpectedInstance(Paramol.SqlClient.TSql+&lt;QueryStatementUnless&gt;d__33,Paramol.SqlQueryCommand[])" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Paramol.Tests.SqlClient.TSqlTests.QueryStatementUnlessReturnsExpectedInstance(Paramol.SqlClient.TSql+&lt;QueryStatementUnless&gt;d__33,Paramol.SqlQueryCommand[])" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Paramol.Tests.SqlClient.TSqlTests.QueryStatementUnlessReturnsExpectedInstance(Paramol.SqlClient.TSql+&lt;QueryStatementUnless&gt;d__33,Paramol.SqlQueryCommand[])" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                            </results>
                          </test-suite>
                          <test-case name="Paramol.Tests.SqlClient.TSqlTests.QueryUnlessParameterCountLimitedTo2098WhenConditionIsMet" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlTests.QueryUnlessParameterCountNotLimitedTo2098WhenConditionIsMet" executed="True" result="Success" success="True" time="0.002" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlTests.UniqueIdentifierNullReturnsExpectedInstance" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlTests.UniqueIdentifierReturnsExpectedInstance" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlTests.VarBinaryMaxNullReturnsExpectedInstance" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlTests.VarBinaryMaxReturnsExpectedInstance" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlTests.VarBinaryNullReturnsExpectedInstance" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlTests.VarBinaryReturnsExpectedInstance" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlTests.VarCharMaxNullReturnsExpectedInstance" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlTests.VarCharMaxReturnsExpectedInstance" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlTests.VarCharNullReturnsExpectedInstance" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlTests.VarCharReturnsExpectedInstance" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="TSqlUniqueIdentifierNullValueTests" executed="True" result="Success" success="True" time="0.007" asserts="0">
                        <results>
                          <test-case name="Paramol.Tests.SqlClient.TSqlUniqueIdentifierNullValueTests.DoesEqualItself" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlUniqueIdentifierNullValueTests.DoesNotEqualNull" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlUniqueIdentifierNullValueTests.DoesNotEqualOtherObjectType" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlUniqueIdentifierNullValueTests.HasExpectedHashCode" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlUniqueIdentifierNullValueTests.InstanceIsSqlNullValue" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlUniqueIdentifierNullValueTests.IsSqlParameterValue" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlUniqueIdentifierNullValueTests.ToDbParameterReturnsExpectedInstance" executed="True" result="Success" success="True" time="0.000" asserts="19" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlUniqueIdentifierNullValueTests.ToSqlParameterReturnsExpectedInstance" executed="True" result="Success" success="True" time="0.000" asserts="17" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="TSqlUniqueIdentifierValueTests" executed="True" result="Success" success="True" time="0.010" asserts="0">
                        <results>
                          <test-case name="Paramol.Tests.SqlClient.TSqlUniqueIdentifierValueTests.DoesEqualItself" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlUniqueIdentifierValueTests.DoesNotEqualNull" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlUniqueIdentifierValueTests.DoesNotEqualOtherObjectType" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlUniqueIdentifierValueTests.IsSqlParameterValue" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlUniqueIdentifierValueTests.ToDbParameterReturnsExpectedInstance" executed="True" result="Success" success="True" time="0.000" asserts="19" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlUniqueIdentifierValueTests.ToSqlParameterReturnsExpectedInstance" executed="True" result="Success" success="True" time="0.000" asserts="17" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlUniqueIdentifierValueTests.TwoInstanceAreEqualIfTheyHaveTheSameValue" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlUniqueIdentifierValueTests.TwoInstanceAreNotEqualIfTheirValueDiffers" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlUniqueIdentifierValueTests.TwoInstanceDoNotHaveTheSameHashCodeIfTheirValueDiffers" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlUniqueIdentifierValueTests.TwoInstanceHaveTheSameHashCodeIfTheyHaveTheSameValue" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="TSqlVarBinaryNullValueTests" executed="True" result="Success" success="True" time="0.006" asserts="0">
                        <results>
                          <test-case name="Paramol.Tests.SqlClient.TSqlVarBinaryNullValueTests.DoesEqualItself" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlVarBinaryNullValueTests.DoesNotEqualNull" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlVarBinaryNullValueTests.DoesNotEqualOtherObjectType" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlVarBinaryNullValueTests.HasExpectedHashCode" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlVarBinaryNullValueTests.IsSqlParameterValue" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlVarBinaryNullValueTests.ToDbParameterReturnsExpectedInstance" executed="True" result="Success" success="True" time="0.000" asserts="19" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlVarBinaryNullValueTests.ToSqlParameterReturnsExpectedInstance" executed="True" result="Success" success="True" time="0.000" asserts="17" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="TSqlVarBinarySizeTest" executed="True" result="Success" success="True" time="0.027" asserts="0">
                        <results>
                          <test-case name="Paramol.Tests.SqlClient.TSqlVarBinarySizeTest.CanBeImplicitlyConvertedFromInt32" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlVarBinarySizeTest.CanBeImplicitlyConvertedToInt32" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlVarBinarySizeTest.DoesEqualItself" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlVarBinarySizeTest.DoesNotEqualNull" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlVarBinarySizeTest.DoesNotEqualObjectOfOtherType" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlVarBinarySizeTest.IsEquatable" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlVarBinarySizeTest.MaxReturnsExpectedResult" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-suite type="ParameterizedTest" name="SizeMustBeWithinRange" executed="True" result="Success" success="True" time="0.006" asserts="0">
                            <results>
                              <test-case name="Paramol.Tests.SqlClient.TSqlVarBinarySizeTest.SizeMustBeWithinRange(int.MinValue,False)" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                              <test-case name="Paramol.Tests.SqlClient.TSqlVarBinarySizeTest.SizeMustBeWithinRange(-2,False)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Paramol.Tests.SqlClient.TSqlVarBinarySizeTest.SizeMustBeWithinRange(-1,True)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Paramol.Tests.SqlClient.TSqlVarBinarySizeTest.SizeMustBeWithinRange(int.MaxValue,False)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Paramol.Tests.SqlClient.TSqlVarBinarySizeTest.SizeMustBeWithinRange(0,True)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Paramol.Tests.SqlClient.TSqlVarBinarySizeTest.SizeMustBeWithinRange(8000,True)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Paramol.Tests.SqlClient.TSqlVarBinarySizeTest.SizeMustBeWithinRange(8001,False)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                            </results>
                          </test-suite>
                          <test-case name="Paramol.Tests.SqlClient.TSqlVarBinarySizeTest.TwoInstancesAreEqualIfTheyHaveTheSameValue" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlVarBinarySizeTest.TwoInstancesAreNotEqualIfTheirValuesDiffer" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlVarBinarySizeTest.TwoInstancesAreNotOperatorEqualIfTheirValuesDiffer" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlVarBinarySizeTest.TwoInstancesAreOperatorEqualIfTheyHaveTheSameValue" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlVarBinarySizeTest.TwoInstancesDoNotHaveTheSameHashCodeIfTheirValuesDiffer" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlVarBinarySizeTest.TwoInstancesHaveTheSameHashCodeIfTheyHaveTheSameValue" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="TSqlVarBinaryValueTests" executed="True" result="Success" success="True" time="0.015" asserts="0">
                        <results>
                          <test-case name="Paramol.Tests.SqlClient.TSqlVarBinaryValueTests.DoesEqualItself" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlVarBinaryValueTests.DoesNotEqualNull" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlVarBinaryValueTests.DoesNotEqualOtherObjectType" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlVarBinaryValueTests.IsSqlParameterValue" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlVarBinaryValueTests.NullIsNotAnAcceptableValue" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlVarBinaryValueTests.ToDbParameterReturnsExpectedInstance" executed="True" result="Success" success="True" time="0.000" asserts="19" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlVarBinaryValueTests.ToSqlParameterReturnsExpectedInstance" executed="True" result="Success" success="True" time="0.000" asserts="17" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlVarBinaryValueTests.TwoInstanceAreEqualIfTheyHaveTheSameValueAndSize" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlVarBinaryValueTests.TwoInstanceAreNotEqualIfTheirSizeDiffers" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlVarBinaryValueTests.TwoInstanceAreNotEqualIfTheirValueContentDiffers" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlVarBinaryValueTests.TwoInstanceAreNotEqualIfTheirValueLengthDiffers" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlVarBinaryValueTests.TwoInstanceDoNotHaveTheSameHashCodeIfTheirSizeDiffers" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlVarBinaryValueTests.TwoInstanceDoNotHaveTheSameHashCodeIfTheirValueContentDiffers" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlVarBinaryValueTests.TwoInstanceDoNotHaveTheSameHashCodeIfTheirValueLengthDiffers" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlVarBinaryValueTests.TwoInstanceHaveTheSameHashCodeIfTheyHaveTheSameValueAndSize" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="TSqlVarCharNullValueTests" executed="True" result="Success" success="True" time="0.006" asserts="0">
                        <results>
                          <test-case name="Paramol.Tests.SqlClient.TSqlVarCharNullValueTests.DoesEqualItself" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlVarCharNullValueTests.DoesNotEqualNull" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlVarCharNullValueTests.DoesNotEqualOtherObjectType" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlVarCharNullValueTests.HasExpectedHashCode" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlVarCharNullValueTests.IsSqlParameterValue" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlVarCharNullValueTests.ToDbParameterReturnsExpectedInstance" executed="True" result="Success" success="True" time="0.000" asserts="19" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlVarCharNullValueTests.ToSqlParameterReturnsExpectedInstance" executed="True" result="Success" success="True" time="0.000" asserts="17" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="TSqlVarCharSizeTest" executed="True" result="Success" success="True" time="0.021" asserts="0">
                        <results>
                          <test-case name="Paramol.Tests.SqlClient.TSqlVarCharSizeTest.CanBeImplicitlyConvertedFromInt32" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlVarCharSizeTest.CanBeImplicitlyConvertedToInt32" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlVarCharSizeTest.DoesEqualItself" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlVarCharSizeTest.DoesNotEqualNull" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlVarCharSizeTest.DoesNotEqualObjectOfOtherType" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlVarCharSizeTest.IsEquatable" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlVarCharSizeTest.MaxReturnsExpectedResult" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-suite type="ParameterizedTest" name="SizeMustBeWithinRange" executed="True" result="Success" success="True" time="0.006" asserts="0">
                            <results>
                              <test-case name="Paramol.Tests.SqlClient.TSqlVarCharSizeTest.SizeMustBeWithinRange(-1,True)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Paramol.Tests.SqlClient.TSqlVarCharSizeTest.SizeMustBeWithinRange(8000,True)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Paramol.Tests.SqlClient.TSqlVarCharSizeTest.SizeMustBeWithinRange(8001,False)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Paramol.Tests.SqlClient.TSqlVarCharSizeTest.SizeMustBeWithinRange(int.MaxValue,False)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Paramol.Tests.SqlClient.TSqlVarCharSizeTest.SizeMustBeWithinRange(int.MinValue,False)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Paramol.Tests.SqlClient.TSqlVarCharSizeTest.SizeMustBeWithinRange(-2,False)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Paramol.Tests.SqlClient.TSqlVarCharSizeTest.SizeMustBeWithinRange(0,True)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                            </results>
                          </test-suite>
                          <test-case name="Paramol.Tests.SqlClient.TSqlVarCharSizeTest.TwoInstancesAreEqualIfTheyHaveTheSameValue" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlVarCharSizeTest.TwoInstancesAreNotEqualIfTheirValuesDiffer" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlVarCharSizeTest.TwoInstancesAreNotOperatorEqualIfTheirValuesDiffer" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlVarCharSizeTest.TwoInstancesAreOperatorEqualIfTheyHaveTheSameValue" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlVarCharSizeTest.TwoInstancesDoNotHaveTheSameHashCodeIfTheirValuesDiffer" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlVarCharSizeTest.TwoInstancesHaveTheSameHashCodeIfTheyHaveTheSameValue" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="TSqlVarCharValueTests" executed="True" result="Success" success="True" time="0.014" asserts="0">
                        <results>
                          <test-case name="Paramol.Tests.SqlClient.TSqlVarCharValueTests.DoesEqualItself" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlVarCharValueTests.DoesNotEqualNull" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlVarCharValueTests.DoesNotEqualOtherObjectType" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlVarCharValueTests.IsSqlParameterValue" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlVarCharValueTests.NullIsNotAnAcceptableValue" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlVarCharValueTests.ToDbParameterReturnsExpectedInstance" executed="True" result="Success" success="True" time="0.000" asserts="19" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlVarCharValueTests.ToSqlParameterReturnsExpectedInstance" executed="True" result="Success" success="True" time="0.000" asserts="17" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlVarCharValueTests.TwoInstanceAreEqualIfTheyHaveTheSameValueAndSize" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlVarCharValueTests.TwoInstanceAreNotEqualIfTheirSizeDiffers" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlVarCharValueTests.TwoInstanceAreNotEqualIfTheirValueDiffers" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlVarCharValueTests.TwoInstanceDoNotHaveTheSameHashCodeIfTheirSizeDiffers" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlVarCharValueTests.TwoInstanceDoNotHaveTheSameHashCodeIfTheirValueDiffers" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlClient.TSqlVarCharValueTests.TwoInstanceHaveTheSameHashCodeIfTheyHaveTheSameValueAndSize" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="SqlNonQueryCommandComposerTests" executed="True" result="Success" success="True" time="0.048" asserts="0">
                    <results>
                      <test-case name="Paramol.Tests.SqlNonQueryCommandComposerTests.ComposedEnumerationCommandsArePreservedAndReturnedByComposition" executed="True" result="Success" success="True" time="0.003" asserts="1" />
                      <test-case name="Paramol.Tests.SqlNonQueryCommandComposerTests.ComposedIfEnumerationCommandsArePreservedAndReturnedByCompositionIsFalse" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="Paramol.Tests.SqlNonQueryCommandComposerTests.ComposedIfEnumerationCommandsArePreservedAndReturnedByCompositionWhenConditionIsTrue" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="Paramol.Tests.SqlNonQueryCommandComposerTests.ComposedIfParamsArrayCommandsArePreservedAndReturnedByCompositionWhenConditionIsFalse" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="Paramol.Tests.SqlNonQueryCommandComposerTests.ComposedIfParamsArrayCommandsArePreservedAndReturnedByCompositionWhenConditionIsTrue" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="Paramol.Tests.SqlNonQueryCommandComposerTests.ComposedParamsArrayCommandsArePreservedAndReturnedByComposition" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                      <test-case name="Paramol.Tests.SqlNonQueryCommandComposerTests.ComposedUnlessEnumerationCommandsArePreservedAndReturnedByCompositionIsTrue" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="Paramol.Tests.SqlNonQueryCommandComposerTests.ComposedUnlessEnumerationCommandsArePreservedAndReturnedByCompositionWhenConditionIsFalse" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="Paramol.Tests.SqlNonQueryCommandComposerTests.ComposedUnlessParamsArrayCommandsArePreservedAndReturnedByCompositionWhenConditionIsFalse" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="Paramol.Tests.SqlNonQueryCommandComposerTests.ComposedUnlessParamsArrayCommandsArePreservedAndReturnedByCompositionWhenConditionIsTrue" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="Paramol.Tests.SqlNonQueryCommandComposerTests.ComposeEnumerationCommandsCanNotBeNull" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="Paramol.Tests.SqlNonQueryCommandComposerTests.ComposeEnumerationReturnsComposition" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-suite type="ParameterizedTest" name="ComposeIfEnumerationReturnsComposition" executed="True" result="Success" success="True" time="0.001" asserts="0">
                        <results>
                          <test-case name="Paramol.Tests.SqlNonQueryCommandComposerTests.ComposeIfEnumerationReturnsComposition(True)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlNonQueryCommandComposerTests.ComposeIfEnumerationReturnsComposition(False)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-case name="Paramol.Tests.SqlNonQueryCommandComposerTests.ComposeIfParamsArrayCommandsCanBeNullWhenConditionIsFalse" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="Paramol.Tests.SqlNonQueryCommandComposerTests.ComposeIfParamsArrayCommandsCanNotBeNullWhenConditionIsTrue" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                      <test-suite type="ParameterizedTest" name="ComposeIfParamsArrayReturnsComposition" executed="True" result="Success" success="True" time="0.001" asserts="0">
                        <results>
                          <test-case name="Paramol.Tests.SqlNonQueryCommandComposerTests.ComposeIfParamsArrayReturnsComposition(True)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlNonQueryCommandComposerTests.ComposeIfParamsArrayReturnsComposition(False)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-case name="Paramol.Tests.SqlNonQueryCommandComposerTests.ComposeIfParamsEnumerationCommandsCanBeNullWhenConditionIsFalse" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="Paramol.Tests.SqlNonQueryCommandComposerTests.ComposeIfParamsEnumerationCommandsCanNotBeNullWhenConditionIsTrue" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                      <test-case name="Paramol.Tests.SqlNonQueryCommandComposerTests.ComposeParamsArrayCommandsCanNotBeNull" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="Paramol.Tests.SqlNonQueryCommandComposerTests.ComposeParamsArrayReturnsComposition" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-suite type="ParameterizedTest" name="ComposeUnlessEnumerationReturnsComposition" executed="True" result="Success" success="True" time="0.001" asserts="0">
                        <results>
                          <test-case name="Paramol.Tests.SqlNonQueryCommandComposerTests.ComposeUnlessEnumerationReturnsComposition(True)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlNonQueryCommandComposerTests.ComposeUnlessEnumerationReturnsComposition(False)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-case name="Paramol.Tests.SqlNonQueryCommandComposerTests.ComposeUnlessParamsArrayCommandsCanBeNullWhenConditionIsTrue" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="Paramol.Tests.SqlNonQueryCommandComposerTests.ComposeUnlessParamsArrayCommandsCanNotBeNullWhenConditionIsFalse" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                      <test-suite type="ParameterizedTest" name="ComposeUnlessParamsArrayReturnsComposition" executed="True" result="Success" success="True" time="0.001" asserts="0">
                        <results>
                          <test-case name="Paramol.Tests.SqlNonQueryCommandComposerTests.ComposeUnlessParamsArrayReturnsComposition(True)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlNonQueryCommandComposerTests.ComposeUnlessParamsArrayReturnsComposition(False)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-case name="Paramol.Tests.SqlNonQueryCommandComposerTests.ComposeUnlessParamsEnumerationCommandsCanBeNullWhenConditionIsTrue" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="Paramol.Tests.SqlNonQueryCommandComposerTests.ComposeUnlessParamsEnumerationCommandsCanNotBeNullWhenConditionIsFalse" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                      <test-case name="Paramol.Tests.SqlNonQueryCommandComposerTests.CtorStatementsCanNotBeNull" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="Paramol.Tests.SqlNonQueryCommandComposerTests.ExplicitlyConvertsToTSqlCommandsArray" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="Paramol.Tests.SqlNonQueryCommandComposerTests.ImplicitlyConvertsToTSqlCommandsArray" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="SqlNonQueryCommandTests" executed="True" result="Success" success="True" time="0.011" asserts="0">
                    <results>
                      <test-case name="Paramol.Tests.SqlNonQueryCommandTests.ParametersCanBeEmpty" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="Paramol.Tests.SqlNonQueryCommandTests.ParametersCanNotBeNull" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="Paramol.Tests.SqlNonQueryCommandTests.PropertiesReturnExpectedValues" executed="True" result="Success" success="True" time="0.002" asserts="3" />
                      <test-case name="Paramol.Tests.SqlNonQueryCommandTests.TextCanBeEmpty" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="Paramol.Tests.SqlNonQueryCommandTests.TextCanNotBeNull" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-suite type="ParameterizedTest" name="TypeCanBeUnsupportedEnumValue" executed="True" result="Success" success="True" time="0.002" asserts="0">
                        <results>
                          <test-case name="Paramol.Tests.SqlNonQueryCommandTests.TypeCanBeUnsupportedEnumValue(Text)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlNonQueryCommandTests.TypeCanBeUnsupportedEnumValue(StoredProcedure)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlNonQueryCommandTests.TypeCanBeUnsupportedEnumValue(TableDirect)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-case name="Paramol.Tests.SqlNonQueryCommandTests.TypeCanNotBeUnsupportedEnumValue" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="SqlQueryCommandTests" executed="True" result="Success" success="True" time="0.010" asserts="0">
                    <results>
                      <test-case name="Paramol.Tests.SqlQueryCommandTests.ParametersCanBeEmpty" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="Paramol.Tests.SqlQueryCommandTests.ParametersCanNotBeNull" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="Paramol.Tests.SqlQueryCommandTests.PropertiesReturnExpectedValues" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                      <test-case name="Paramol.Tests.SqlQueryCommandTests.TextCanBeEmpty" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="Paramol.Tests.SqlQueryCommandTests.TextCanNotBeNull" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-suite type="ParameterizedTest" name="TypeCanBeUnsupportedEnumValue" executed="True" result="Success" success="True" time="0.003" asserts="0">
                        <results>
                          <test-case name="Paramol.Tests.SqlQueryCommandTests.TypeCanBeUnsupportedEnumValue(StoredProcedure)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlQueryCommandTests.TypeCanBeUnsupportedEnumValue(TableDirect)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Paramol.Tests.SqlQueryCommandTests.TypeCanBeUnsupportedEnumValue(Text)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-case name="Paramol.Tests.SqlQueryCommandTests.TypeCanNotBeUnsupportedEnumValue" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
    </results>
  </test-suite>
</test-results>